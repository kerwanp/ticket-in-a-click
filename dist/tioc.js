/*! For license information please see tioc.js.LICENSE.txt */
(()=>{var e,t,n={679:(e,t,n)=>{"use strict";var r=n(296),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||a}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var a=p(n);a&&a!==m&&e(t,a,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var l=u(t),h=u(n),g=0;g<i.length;++g){var b=i[g];if(!(o[b]||r&&r[b]||h&&h[b]||l&&l[b])){var y=d(n,b);try{s(t,b,y)}catch(e){}}}}return t}},103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,b=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,v=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case o:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case g:case h:case u:return e;default:return t}}case a:return t}}}function x(e){return k(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=o,t.Lazy=g,t.Memo=h,t.Portal=a,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return x(e)||k(e)===c},t.isConcurrentMode=x,t.isContextConsumer=function(e){return k(e)===s},t.isContextProvider=function(e){return k(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return k(e)===d},t.isFragment=function(e){return k(e)===o},t.isLazy=function(e){return k(e)===g},t.isMemo=function(e){return k(e)===h},t.isPortal=function(e){return k(e)===a},t.isProfiler=function(e){return k(e)===l},t.isStrictMode=function(e){return k(e)===i},t.isSuspense=function(e){return k(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===l||e===i||e===p||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===h||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===y||e.$$typeof===v||e.$$typeof===w||e.$$typeof===b)},t.typeOf=k},296:(e,t,n)=>{"use strict";e.exports=n(103)},448:(e,t,n)=>{"use strict";var r=n(294),a=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},m={};function h(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function v(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!f.call(m,e)||!f.call(p,e)&&(d.test(e)?m[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,y);g[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,y);g[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,y);g[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),x=Symbol.for("react.portal"),S=Symbol.for("react.fragment"),E=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),_=Symbol.for("react.provider"),z=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),T=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),O=Symbol.for("react.memo"),M=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var $=Symbol.iterator;function L(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=$&&e[$]||e["@@iterator"])?e:null}var I,F=Object.assign;function A(e){if(void 0===I)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);I=t&&t[1]||""}return"\n"+I+e}var j=!1;function D(e,t){if(!e||j)return"";j=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l]){var u="\n"+a[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{j=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?A(e):""}function W(e){switch(e.tag){case 5:return A(e.type);case 16:return A("Lazy");case 13:return A("Suspense");case 19:return A("SuspenseList");case 0:case 2:case 15:return D(e.type,!1);case 11:return D(e.type.render,!1);case 1:return D(e.type,!0);default:return""}}function B(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case x:return"Portal";case C:return"Profiler";case E:return"StrictMode";case T:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case z:return(e.displayName||"Context")+".Consumer";case _:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case O:return null!==(t=e.displayName||null)?t:B(e.type)||"Memo";case M:t=e._payload,e=e._init;try{return B(e(t))}catch(e){}}return null}function U(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return B(t);case 8:return t===E?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function q(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function G(e,t){var n=t.checked;return F({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function X(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Y(e,t){null!=(t=t.checked)&&v(e,"checked",t,!1)}function Z(e,t){Y(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return F({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function oe(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function he(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=he(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){me.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var be=F({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(be[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function ve(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,Se=null,Ee=null;function Ce(e){if(e=va(e)){if("function"!=typeof xe)throw Error(o(280));var t=e.stateNode;t&&(t=ka(t),xe(e.stateNode,e.type,t))}}function _e(e){Se?Ee?Ee.push(e):Ee=[e]:Se=e}function ze(){if(Se){var e=Se,t=Ee;if(Ee=Se=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Pe(e,t){return e(t)}function Te(){}var Ne=!1;function Oe(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return Pe(e,t,n)}finally{Ne=!1,(null!==Se||null!==Ee)&&(Te(),ze())}}function Me(e,t){var n=e.stateNode;if(null===n)return null;var r=ka(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Re=!1;if(c)try{var $e={};Object.defineProperty($e,"passive",{get:function(){Re=!0}}),window.addEventListener("test",$e,$e),window.removeEventListener("test",$e,$e)}catch(ce){Re=!1}function Le(e,t,n,r,a,o,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Ie=!1,Fe=null,Ae=!1,je=null,De={onError:function(e){Ie=!0,Fe=e}};function We(e,t,n,r,a,o,i,l,u){Ie=!1,Fe=null,Le.apply(De,arguments)}function Be(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ue(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if(Be(e)!==e)throw Error(o(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Be(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return Ve(a),e;if(i===r)return Ve(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=i;break}if(u===r){l=!0,r=a,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=a;break}if(u===r){l=!0,r=i,n=a;break}u=u.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?qe(e):null}function qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=qe(e);if(null!==t)return t;e=e.sibling}return null}var Qe=a.unstable_scheduleCallback,Ke=a.unstable_cancelCallback,Ge=a.unstable_shouldYield,Xe=a.unstable_requestPaint,Ye=a.unstable_now,Ze=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,it=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~a;0!==l?r=ft(l):0!=(o&=i)&&(r=ft(o))}else 0!=(i=n&~a)?r=ft(i):0!==o&&(r=ft(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function bt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var vt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var kt,xt,St,Et,Ct,_t=!1,zt=[],Pt=null,Tt=null,Nt=null,Ot=new Map,Mt=new Map,Rt=[],$t="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lt(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":Tt=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":Ot.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Mt.delete(t.pointerId)}}function It(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=va(t))&&xt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Ft(e){var t=ya(e.target);if(null!==t){var n=Be(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ue(n)))return e.blockedOn=t,void Ct(e.priority,(function(){St(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function At(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=va(n))&&xt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function jt(e,t,n){At(e)&&n.delete(t)}function Dt(){_t=!1,null!==Pt&&At(Pt)&&(Pt=null),null!==Tt&&At(Tt)&&(Tt=null),null!==Nt&&At(Nt)&&(Nt=null),Ot.forEach(jt),Mt.forEach(jt)}function Wt(e,t){e.blockedOn===t&&(e.blockedOn=null,_t||(_t=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Dt)))}function Bt(e){function t(t){return Wt(t,e)}if(0<zt.length){Wt(zt[0],e);for(var n=1;n<zt.length;n++){var r=zt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&Wt(Pt,e),null!==Tt&&Wt(Tt,e),null!==Nt&&Wt(Nt,e),Ot.forEach(t),Mt.forEach(t),n=0;n<Rt.length;n++)(r=Rt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Rt.length&&null===(n=Rt[0]).blockedOn;)Ft(n),null===n.blockedOn&&Rt.shift()}var Ut=w.ReactCurrentBatchConfig,Vt=!0;function Ht(e,t,n,r){var a=vt,o=Ut.transition;Ut.transition=null;try{vt=1,Qt(e,t,n,r)}finally{vt=a,Ut.transition=o}}function qt(e,t,n,r){var a=vt,o=Ut.transition;Ut.transition=null;try{vt=4,Qt(e,t,n,r)}finally{vt=a,Ut.transition=o}}function Qt(e,t,n,r){if(Vt){var a=Gt(e,t,n,r);if(null===a)Vr(e,t,r,Kt,n),Lt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Pt=It(Pt,e,t,n,r,a),!0;case"dragenter":return Tt=It(Tt,e,t,n,r,a),!0;case"mouseover":return Nt=It(Nt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Ot.set(o,It(Ot.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Mt.set(o,It(Mt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Lt(e,r),4&t&&-1<$t.indexOf(e)){for(;null!==a;){var o=va(a);if(null!==o&&kt(o),null===(o=Gt(e,t,n,r))&&Vr(e,t,r,Kt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var Kt=null;function Gt(e,t,n,r){if(Kt=null,null!==(e=ya(e=ke(r))))if(null===(t=Be(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ue(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Xt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Yt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,a="value"in Yt?Yt.value:Yt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Jt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return F(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(sn),fn=F({},sn,{view:0,detail:0}),dn=an(fn),pn=F({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(on=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=on=0,un=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),mn=an(pn),hn=an(F({},pn,{dataTransfer:0})),gn=an(F({},fn,{relatedTarget:0})),bn=an(F({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=F({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),vn=an(yn),wn=an(F({},sn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function Cn(){return En}var _n=F({},fn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),zn=an(_n),Pn=an(F({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=an(F({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),Nn=an(F({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),On=F({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Mn=an(On),Rn=[9,13,27,32],$n=c&&"CompositionEvent"in window,Ln=null;c&&"documentMode"in document&&(Ln=document.documentMode);var In=c&&"TextEvent"in window&&!Ln,Fn=c&&(!$n||Ln&&8<Ln&&11>=Ln),An=String.fromCharCode(32),jn=!1;function Dn(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Wn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Hn(e,t,n,r){_e(r),0<(t=qr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Qn=null;function Kn(e){Ar(e,0)}function Gn(e){if(Q(wa(e)))return e}function Xn(e,t){if("change"===e)return t}var Yn=!1;if(c){var Zn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Yn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){qn&&(qn.detachEvent("onpropertychange",nr),Qn=qn=null)}function nr(e){if("value"===e.propertyName&&Gn(Qn)){var t=[];Hn(t,Qn,e,ke(e)),Oe(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Qn=n,(qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Qn)}function or(e,t){if("click"===e)return Gn(t)}function ir(e,t){if("input"===e||"change"===e)return Gn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!f.call(t,a)||!lr(e[a],t[a]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function mr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var i=cr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,br=null,yr=null,vr=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;vr||null==gr||gr!==K(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&ur(yr,r)||(yr=r,0<(r=qr(br,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function kr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xr={animationend:kr("Animation","AnimationEnd"),animationiteration:kr("Animation","AnimationIteration"),animationstart:kr("Animation","AnimationStart"),transitionend:kr("Transition","TransitionEnd")},Sr={},Er={};function Cr(e){if(Sr[e])return Sr[e];if(!xr[e])return e;var t,n=xr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Er)return Sr[e]=n[t];return e}c&&(Er=document.createElement("div").style,"AnimationEvent"in window||(delete xr.animationend.animation,delete xr.animationiteration.animation,delete xr.animationstart.animation),"TransitionEvent"in window||delete xr.transitionend.transition);var _r=Cr("animationend"),zr=Cr("animationiteration"),Pr=Cr("animationstart"),Tr=Cr("transitionend"),Nr=new Map,Or="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Mr(e,t){Nr.set(e,t),u(t,[e])}for(var Rr=0;Rr<Or.length;Rr++){var $r=Or[Rr];Mr($r.toLowerCase(),"on"+($r[0].toUpperCase()+$r.slice(1)))}Mr(_r,"onAnimationEnd"),Mr(zr,"onAnimationIteration"),Mr(Pr,"onAnimationStart"),Mr("dblclick","onDoubleClick"),Mr("focusin","onFocus"),Mr("focusout","onBlur"),Mr(Tr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ir=new Set("cancel close invalid load scroll toggle".split(" ").concat(Lr));function Fr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,l,u,s){if(We.apply(this,arguments),Ie){if(!Ie)throw Error(o(198));var c=Fe;Ie=!1,Fe=null,Ae||(Ae=!0,je=c)}}(r,t,void 0,e),e.currentTarget=null}function Ar(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==o&&a.isPropagationStopped())break e;Fr(a,l,s),o=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==o&&a.isPropagationStopped())break e;Fr(a,l,s),o=u}}}if(Ae)throw e=je,Ae=!1,je=null,e}function jr(e,t){var n=t[ha];void 0===n&&(n=t[ha]=new Set);var r=e+"__bubble";n.has(r)||(Ur(t,e,2,!1),n.add(r))}function Dr(e,t,n){var r=0;t&&(r|=4),Ur(n,e,r,t)}var Wr="_reactListening"+Math.random().toString(36).slice(2);function Br(e){if(!e[Wr]){e[Wr]=!0,i.forEach((function(t){"selectionchange"!==t&&(Ir.has(t)||Dr(t,!1,e),Dr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Wr]||(t[Wr]=!0,Dr("selectionchange",!1,t))}}function Ur(e,t,n,r){switch(Xt(t)){case 1:var a=Ht;break;case 4:a=qt;break;default:a=Qt}n=a.bind(null,t,n,e),a=void 0,!Re||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=ya(l)))return;if(5===(u=i.tag)||6===u){r=o=i;continue e}l=l.parentNode}}r=r.return}Oe((function(){var r=o,a=ke(n),i=[];e:{var l=Nr.get(e);if(void 0!==l){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=zn;break;case"focusin":s="focus",u=gn;break;case"focusout":s="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Tn;break;case _r:case zr:case Pr:u=bn;break;case Tr:u=Nn;break;case"scroll":u=dn;break;case"wheel":u=Mn;break;case"copy":case"cut":case"paste":u=vn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==d&&null!=(h=Me(m,d))&&c.push(Hr(m,h,p))),f)break;m=m.return}0<c.length&&(l=new u(l,s,null,n,a),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!ya(s)&&!s[ma])&&(u||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?ya(s):null)&&(s!==(f=Be(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=mn,h="onMouseLeave",d="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,h="onPointerLeave",d="onPointerEnter",m="pointer"),f=null==u?l:wa(u),p=null==s?l:wa(s),(l=new c(h,m+"leave",u,n,a)).target=f,l.relatedTarget=p,h=null,ya(a)===r&&((c=new c(d,m+"enter",s,n,a)).target=p,c.relatedTarget=f,h=c),f=h,u&&s)e:{for(d=s,m=0,p=c=u;p;p=Qr(p))m++;for(p=0,h=d;h;h=Qr(h))p++;for(;0<m-p;)c=Qr(c),m--;for(;0<p-m;)d=Qr(d),p--;for(;m--;){if(c===d||null!==d&&c===d.alternate)break e;c=Qr(c),d=Qr(d)}c=null}else c=null;null!==u&&Kr(i,l,u,c,!1),null!==s&&null!==f&&Kr(i,f,s,c,!0)}if("select"===(u=(l=r?wa(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var g=Xn;else if(Vn(l))if(Yn)g=ir;else{g=ar;var b=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=or);switch(g&&(g=g(e,r))?Hn(i,g,n,a):(b&&b(e,l,r),"focusout"===e&&(b=l._wrapperState)&&b.controlled&&"number"===l.type&&ee(l,"number",l.value)),b=r?wa(r):window,e){case"focusin":(Vn(b)||"true"===b.contentEditable)&&(gr=b,br=r,yr=null);break;case"focusout":yr=br=gr=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,wr(i,n,a);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":wr(i,n,a)}var y;if($n)e:{switch(e){case"compositionstart":var v="onCompositionStart";break e;case"compositionend":v="onCompositionEnd";break e;case"compositionupdate":v="onCompositionUpdate";break e}v=void 0}else Bn?Dn(e,n)&&(v="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(v="onCompositionStart");v&&(Fn&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==v?"onCompositionEnd"===v&&Bn&&(y=en()):(Zt="value"in(Yt=a)?Yt.value:Yt.textContent,Bn=!0)),0<(b=qr(r,v)).length&&(v=new wn(v,e,null,n,a),i.push({event:v,listeners:b}),(y||null!==(y=Wn(n)))&&(v.data=y))),(y=In?function(e,t){switch(e){case"compositionend":return Wn(t);case"keypress":return 32!==t.which?null:(jn=!0,An);case"textInput":return(e=t.data)===An&&jn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!$n&&Dn(e,t)?(e=en(),Jt=Zt=Yt=null,Bn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Fn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=qr(r,"onBeforeInput")).length&&(a=new wn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}Ar(i,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Me(e,n))&&r.unshift(Hr(e,o,a)),null!=(o=Me(e,t))&&r.push(Hr(e,o,a))),e=e.return}return r}function Qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,a?null!=(u=Me(n,o))&&i.unshift(Hr(n,u,l)):a||null!=(u=Me(n,o))&&i.push(Hr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Gr=/\r\n?/g,Xr=/\u0000|\uFFFD/g;function Yr(e){return("string"==typeof e?e:""+e).replace(Gr,"\n").replace(Xr,"")}function Zr(e,t,n){if(t=Yr(t),Yr(e)!==t&&n)throw Error(o(425))}function Jr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(la)}:ra;function la(e){setTimeout((function(){throw e}))}function ua(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Bt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Bt(t)}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fa=Math.random().toString(36).slice(2),da="__reactFiber$"+fa,pa="__reactProps$"+fa,ma="__reactContainer$"+fa,ha="__reactEvents$"+fa,ga="__reactListeners$"+fa,ba="__reactHandles$"+fa;function ya(e){var t=e[da];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ma]||n[da]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[da])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function va(e){return!(e=e[da]||e[ma])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function ka(e){return e[pa]||null}var xa=[],Sa=-1;function Ea(e){return{current:e}}function Ca(e){0>Sa||(e.current=xa[Sa],xa[Sa]=null,Sa--)}function _a(e,t){Sa++,xa[Sa]=e.current,e.current=t}var za={},Pa=Ea(za),Ta=Ea(!1),Na=za;function Oa(e,t){var n=e.type.contextTypes;if(!n)return za;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ma(e){return null!=e.childContextTypes}function Ra(){Ca(Ta),Ca(Pa)}function $a(e,t,n){if(Pa.current!==za)throw Error(o(168));_a(Pa,t),_a(Ta,n)}function La(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,U(e)||"Unknown",a));return F({},n,r)}function Ia(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||za,Na=Pa.current,_a(Pa,e),_a(Ta,Ta.current),!0}function Fa(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=La(e,t,Na),r.__reactInternalMemoizedMergedChildContext=e,Ca(Ta),Ca(Pa),_a(Pa,e)):Ca(Ta),_a(Ta,n)}var Aa=null,ja=!1,Da=!1;function Wa(e){null===Aa?Aa=[e]:Aa.push(e)}function Ba(){if(!Da&&null!==Aa){Da=!0;var e=0,t=vt;try{var n=Aa;for(vt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Aa=null,ja=!1}catch(t){throw null!==Aa&&(Aa=Aa.slice(e+1)),Qe(Je,Ba),t}finally{vt=t,Da=!1}}return null}var Ua=w.ReactCurrentBatchConfig;function Va(e,t){if(e&&e.defaultProps){for(var n in t=F({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ha=Ea(null),qa=null,Qa=null,Ka=null;function Ga(){Ka=Qa=qa=null}function Xa(e){var t=Ha.current;Ca(Ha),e._currentValue=t}function Ya(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Za(e,t){qa=e,Ka=Qa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(kl=!0),e.firstContext=null)}function Ja(e){var t=e._currentValue;if(Ka!==e)if(e={context:e,memoizedValue:t,next:null},null===Qa){if(null===qa)throw Error(o(308));Qa=e,qa.dependencies={lanes:0,firstContext:e}}else Qa=Qa.next=e;return t}var eo=null,to=!1;function no(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function ro(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ao(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function oo(e,t){var n=e.updateQueue;null!==n&&(n=n.shared,ts(e)?(null===(e=n.interleaved)?(t.next=t,null===eo?eo=[n]:eo.push(n)):(t.next=e.next,e.next=t),n.interleaved=t):(null===(e=n.pending)?t.next=t:(t.next=e.next,e.next=t),n.pending=t))}function io(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function lo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function uo(e,t,n,r){var a=e.updateQueue;to=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var u=l,s=u.next;u.next=null,null===i?o=s:i.next=s,i=u;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u)}if(null!==o){var f=a.baseState;for(i=0,c=s=u=null,l=o;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(d=t,p=n,h.tag){case 1:if("function"==typeof(m=h.payload)){f=m.call(p,f,d);break e}f=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(d="function"==typeof(m=h.payload)?m.call(p,f,d):m))break e;f=F({},f,d);break e;case 2:to=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=a.effects)?a.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,i|=d;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(d=l).next,d.next=null,a.lastBaseUpdate=d,a.shared.pending=null}}if(null===c&&(u=f),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);Ru|=i,e.lanes=i,e.memoizedState=f}}function so(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var co=(new r.Component).refs;function fo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:F({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var po={isMounted:function(e){return!!(e=e._reactInternals)&&Be(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Yu(),a=Zu(e),o=ao(r,a);o.payload=t,null!=n&&(o.callback=n),oo(e,o),null!==(t=Ju(e,a,r))&&io(t,e,a)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Yu(),a=Zu(e),o=ao(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),oo(e,o),null!==(t=Ju(e,a,r))&&io(t,e,a)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Yu(),r=Zu(e),a=ao(n,r);a.tag=2,null!=t&&(a.callback=t),oo(e,a),null!==(t=Ju(e,r,n))&&io(t,e,r)}};function mo(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,o))}function ho(e,t,n){var r=!1,a=za,o=t.contextType;return"object"==typeof o&&null!==o?o=Ja(o):(a=Ma(t)?Na:Pa.current,o=(r=null!=(r=t.contextTypes))?Oa(e,a):za),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=po,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function go(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&po.enqueueReplaceState(t,t.state,null)}function bo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=co,no(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=Ja(o):(o=Ma(t)?Na:Pa.current,a.context=Oa(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(fo(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&po.enqueueReplaceState(a,a.state,null),uo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}var yo=[],vo=0,wo=null,ko=0,xo=[],So=0,Eo=null,Co=1,_o="";function zo(e,t){yo[vo++]=ko,yo[vo++]=wo,wo=e,ko=t}function Po(e,t,n){xo[So++]=Co,xo[So++]=_o,xo[So++]=Eo,Eo=e;var r=Co;e=_o;var a=32-it(r)-1;r&=~(1<<a),n+=1;var o=32-it(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Co=1<<32-it(t)+a|n<<a|r,_o=o+e}else Co=1<<o|n<<a|r,_o=e}function To(e){null!==e.return&&(zo(e,1),Po(e,1,0))}function No(e){for(;e===wo;)wo=yo[--vo],yo[vo]=null,ko=yo[--vo],yo[vo]=null;for(;e===Eo;)Eo=xo[--So],xo[So]=null,_o=xo[--So],xo[So]=null,Co=xo[--So],xo[So]=null}var Oo=null,Mo=null,Ro=!1,$o=null;function Lo(e,t){var n=Ns(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function Io(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,Oo=e,Mo=sa(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,Oo=e,Mo=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Eo?{id:Co,overflow:_o}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ns(18,null,null,0)).stateNode=t,n.return=e,e.child=n,Oo=e,Mo=null,!0);default:return!1}}function Fo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function Ao(e){if(Ro){var t=Mo;if(t){var n=t;if(!Io(e,t)){if(Fo(e))throw Error(o(418));t=sa(n.nextSibling);var r=Oo;t&&Io(e,t)?Lo(r,n):(e.flags=-4097&e.flags|2,Ro=!1,Oo=e)}}else{if(Fo(e))throw Error(o(418));e.flags=-4097&e.flags|2,Ro=!1,Oo=e}}}function jo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Oo=e}function Do(e){if(e!==Oo)return!1;if(!Ro)return jo(e),Ro=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=Mo)){if(Fo(e)){for(e=Mo;e;)e=sa(e.nextSibling);throw Error(o(418))}for(;t;)Lo(e,t),t=sa(t.nextSibling)}if(jo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Mo=sa(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Mo=null}}else Mo=Oo?sa(e.stateNode.nextSibling):null;return!0}function Wo(){Mo=Oo=null,Ro=!1}function Bo(e){null===$o?$o=[e]:$o.push(e)}function Uo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;t===co&&(t=a.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Vo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ho(e){return(0,e._init)(e._payload)}function qo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Ms(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Is(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===S?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===M&&Ho(o)===t.type)?((r=a(t,n.props)).ref=Uo(e,t,n),r.return=e,r):((r=Rs(n.type,n.key,n.props,null,e.mode,r)).ref=Uo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Fs(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=$s(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Is(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Rs(t.type,t.key,t.props,null,e.mode,n)).ref=Uo(e,null,t),n.return=e,n;case x:return(t=Fs(t,e.mode,n)).return=e,t;case M:return d(e,(0,t._init)(t._payload),n)}if(te(t)||L(t))return(t=$s(t,e.mode,n,null)).return=e,t;Vo(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===a?s(e,t,n,r):null;case x:return n.key===a?c(e,t,n,r):null;case M:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||L(n))return null!==a?null:f(e,t,n,r,null);Vo(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case M:return m(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||L(r))return f(t,e=e.get(n)||null,r,a,null);Vo(t,r)}return null}function h(a,o,l,u){for(var s=null,c=null,f=o,h=o=0,g=null;null!==f&&h<l.length;h++){f.index>h?(g=f,f=null):g=f.sibling;var b=p(a,f,l[h],u);if(null===b){null===f&&(f=g);break}e&&f&&null===b.alternate&&t(a,f),o=i(b,o,h),null===c?s=b:c.sibling=b,c=b,f=g}if(h===l.length)return n(a,f),Ro&&zo(a,h),s;if(null===f){for(;h<l.length;h++)null!==(f=d(a,l[h],u))&&(o=i(f,o,h),null===c?s=f:c.sibling=f,c=f);return Ro&&zo(a,h),s}for(f=r(a,f);h<l.length;h++)null!==(g=m(f,a,h,l[h],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?h:g.key),o=i(g,o,h),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(a,e)})),Ro&&zo(a,h),s}function g(a,l,u,s){var c=L(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var f=c=null,h=l,g=l=0,b=null,y=u.next();null!==h&&!y.done;g++,y=u.next()){h.index>g?(b=h,h=null):b=h.sibling;var v=p(a,h,y.value,s);if(null===v){null===h&&(h=b);break}e&&h&&null===v.alternate&&t(a,h),l=i(v,l,g),null===f?c=v:f.sibling=v,f=v,h=b}if(y.done)return n(a,h),Ro&&zo(a,g),c;if(null===h){for(;!y.done;g++,y=u.next())null!==(y=d(a,y.value,s))&&(l=i(y,l,g),null===f?c=y:f.sibling=y,f=y);return Ro&&zo(a,g),c}for(h=r(a,h);!y.done;g++,y=u.next())null!==(y=m(h,a,g,y.value,s))&&(e&&null!==y.alternate&&h.delete(null===y.key?g:y.key),l=i(y,l,g),null===f?c=y:f.sibling=y,f=y);return e&&h.forEach((function(e){return t(a,e)})),Ro&&zo(a,g),c}return function e(r,o,i,u){if("object"==typeof i&&null!==i&&i.type===S&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case k:e:{for(var s=i.key,c=o;null!==c;){if(c.key===s){if((s=i.type)===S){if(7===c.tag){n(r,c.sibling),(o=a(c,i.props.children)).return=r,r=o;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===M&&Ho(s)===c.type){n(r,c.sibling),(o=a(c,i.props)).ref=Uo(r,c,i),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===S?((o=$s(i.props.children,r.mode,u,i.key)).return=r,r=o):((u=Rs(i.type,i.key,i.props,null,r.mode,u)).ref=Uo(r,o,i),u.return=r,r=u)}return l(r);case x:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Fs(i,r.mode,u)).return=r,r=o}return l(r);case M:return e(r,o,(c=i._init)(i._payload),u)}if(te(i))return h(r,o,i,u);if(L(i))return g(r,o,i,u);Vo(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,i)).return=r,r=o):(n(r,o),(o=Is(i,r.mode,u)).return=r,r=o),l(r)):n(r,o)}}var Qo=qo(!0),Ko=qo(!1),Go={},Xo=Ea(Go),Yo=Ea(Go),Zo=Ea(Go);function Jo(e){if(e===Go)throw Error(o(174));return e}function ei(e,t){switch(_a(Zo,t),_a(Yo,e),_a(Xo,Go),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ca(Xo),_a(Xo,t)}function ti(){Ca(Xo),Ca(Yo),Ca(Zo)}function ni(e){Jo(Zo.current);var t=Jo(Xo.current),n=ue(t,e.type);t!==n&&(_a(Yo,e),_a(Xo,n))}function ri(e){Yo.current===e&&(Ca(Xo),Ca(Yo))}var ai=Ea(0);function oi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ii=[];function li(){for(var e=0;e<ii.length;e++)ii[e]._workInProgressVersionPrimary=null;ii.length=0}var ui=w.ReactCurrentDispatcher,si=w.ReactCurrentBatchConfig,ci=0,fi=null,di=null,pi=null,mi=!1,hi=!1,gi=0,bi=0;function yi(){throw Error(o(321))}function vi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function wi(e,t,n,r,a,i){if(ci=i,fi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ui.current=null===e||null===e.memoizedState?rl:al,e=n(r,a),hi){i=0;do{if(hi=!1,gi=0,25<=i)throw Error(o(301));i+=1,pi=di=null,t.updateQueue=null,ui.current=ol,e=n(r,a)}while(hi)}if(ui.current=nl,t=null!==di&&null!==di.next,ci=0,pi=di=fi=null,mi=!1,t)throw Error(o(300));return e}function ki(){var e=0!==gi;return gi=0,e}function xi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===pi?fi.memoizedState=pi=e:pi=pi.next=e,pi}function Si(){if(null===di){var e=fi.alternate;e=null!==e?e.memoizedState:null}else e=di.next;var t=null===pi?fi.memoizedState:pi.next;if(null!==t)pi=t,di=e;else{if(null===e)throw Error(o(310));e={memoizedState:(di=e).memoizedState,baseState:di.baseState,baseQueue:di.baseQueue,queue:di.queue,next:null},null===pi?fi.memoizedState=pi=e:pi=pi.next=e}return pi}function Ei(e,t){return"function"==typeof t?t(e):t}function Ci(e){var t=Si(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=di,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var u=l=null,s=null,c=i;do{var f=c.lane;if((ci&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,l=r):s=s.next=d,fi.lanes|=f,Ru|=f}c=c.next}while(null!==c&&c!==i);null===s?l=r:s.next=u,lr(r,t.memoizedState)||(kl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,fi.lanes|=i,Ru|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function _i(e){var t=Si(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);lr(i,t.memoizedState)||(kl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function zi(){}function Pi(e,t){var n=fi,r=Si(),a=t(),i=!lr(r.memoizedState,a);if(i&&(r.memoizedState=a,kl=!0),r=r.queue,ji(Oi.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==pi&&1&pi.memoizedState.tag){if(n.flags|=2048,$i(9,Ni.bind(null,n,r,a,t),void 0,null),null===_u)throw Error(o(349));0!=(30&ci)||Ti(n,t,a)}return a}function Ti(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=fi.updateQueue)?(t={lastEffect:null,stores:null},fi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ni(e,t,n,r){t.value=n,t.getSnapshot=r,Mi(t)&&Ju(e,1,-1)}function Oi(e,t,n){return n((function(){Mi(t)&&Ju(e,1,-1)}))}function Mi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Ri(e){var t=xi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ei,lastRenderedState:e},t.queue=e,e=e.dispatch=Yi.bind(null,fi,e),[t.memoizedState,e]}function $i(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=fi.updateQueue)?(t={lastEffect:null,stores:null},fi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Li(){return Si().memoizedState}function Ii(e,t,n,r){var a=xi();fi.flags|=e,a.memoizedState=$i(1|t,n,void 0,void 0===r?null:r)}function Fi(e,t,n,r){var a=Si();r=void 0===r?null:r;var o=void 0;if(null!==di){var i=di.memoizedState;if(o=i.destroy,null!==r&&vi(r,i.deps))return void(a.memoizedState=$i(t,n,o,r))}fi.flags|=e,a.memoizedState=$i(1|t,n,o,r)}function Ai(e,t){return Ii(8390656,8,e,t)}function ji(e,t){return Fi(2048,8,e,t)}function Di(e,t){return Fi(4,2,e,t)}function Wi(e,t){return Fi(4,4,e,t)}function Bi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ui(e,t,n){return n=null!=n?n.concat([e]):null,Fi(4,4,Bi.bind(null,t,e),n)}function Vi(){}function Hi(e,t){var n=Si();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&vi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function qi(e,t){var n=Si();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&vi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Qi(e,t,n){return 0==(21&ci)?(e.baseState&&(e.baseState=!1,kl=!0),e.memoizedState=n):(lr(n,t)||(n=ht(),fi.lanes|=n,Ru|=n,e.baseState=!0),t)}function Ki(e,t){var n=vt;vt=0!==n&&4>n?n:4,e(!0);var r=si.transition;si.transition={};try{e(!1),t()}finally{vt=n,si.transition=r}}function Gi(){return Si().memoizedState}function Xi(e,t,n){var r=Zu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Zi(e)?Ji(t,n):(el(e,t,n),null!==(e=Ju(e,r,n=Yu()))&&tl(e,t,r))}function Yi(e,t,n){var r=Zu(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Zi(e))Ji(t,a);else{el(e,t,a);var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,lr(l,i))return}catch(e){}null!==(e=Ju(e,r,n=Yu()))&&tl(e,t,r)}}function Zi(e){var t=e.alternate;return e===fi||null!==t&&t===fi}function Ji(e,t){hi=mi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function el(e,t,n){ts(e)?(null===(e=t.interleaved)?(n.next=n,null===eo?eo=[t]:eo.push(t)):(n.next=e.next,e.next=n),t.interleaved=n):(null===(e=t.pending)?n.next=n:(n.next=e.next,e.next=n),t.pending=n)}function tl(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var nl={readContext:Ja,useCallback:yi,useContext:yi,useEffect:yi,useImperativeHandle:yi,useInsertionEffect:yi,useLayoutEffect:yi,useMemo:yi,useReducer:yi,useRef:yi,useState:yi,useDebugValue:yi,useDeferredValue:yi,useTransition:yi,useMutableSource:yi,useSyncExternalStore:yi,useId:yi,unstable_isNewReconciler:!1},rl={readContext:Ja,useCallback:function(e,t){return xi().memoizedState=[e,void 0===t?null:t],e},useContext:Ja,useEffect:Ai,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ii(4194308,4,Bi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ii(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ii(4,2,e,t)},useMemo:function(e,t){var n=xi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=xi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Xi.bind(null,fi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},xi().memoizedState=e},useState:Ri,useDebugValue:Vi,useDeferredValue:function(e){return xi().memoizedState=e},useTransition:function(){var e=Ri(!1),t=e[0];return e=Ki.bind(null,e[1]),xi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=fi,a=xi();if(Ro){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===_u)throw Error(o(349));0!=(30&ci)||Ti(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Ai(Oi.bind(null,r,i,e),[e]),r.flags|=2048,$i(9,Ni.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=xi(),t=_u.identifierPrefix;if(Ro){var n=_o;t=":"+t+"R"+(n=(Co&~(1<<32-it(Co)-1)).toString(32)+n),0<(n=gi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=bi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},al={readContext:Ja,useCallback:Hi,useContext:Ja,useEffect:ji,useImperativeHandle:Ui,useInsertionEffect:Di,useLayoutEffect:Wi,useMemo:qi,useReducer:Ci,useRef:Li,useState:function(){return Ci(Ei)},useDebugValue:Vi,useDeferredValue:function(e){return Qi(Si(),di.memoizedState,e)},useTransition:function(){return[Ci(Ei)[0],Si().memoizedState]},useMutableSource:zi,useSyncExternalStore:Pi,useId:Gi,unstable_isNewReconciler:!1},ol={readContext:Ja,useCallback:Hi,useContext:Ja,useEffect:ji,useImperativeHandle:Ui,useInsertionEffect:Di,useLayoutEffect:Wi,useMemo:qi,useReducer:_i,useRef:Li,useState:function(){return _i(Ei)},useDebugValue:Vi,useDeferredValue:function(e){var t=Si();return null===di?t.memoizedState=e:Qi(t,di.memoizedState,e)},useTransition:function(){return[_i(Ei)[0],Si().memoizedState]},useMutableSource:zi,useSyncExternalStore:Pi,useId:Gi,unstable_isNewReconciler:!1};function il(e,t){try{var n="",r=t;do{n+=W(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ul,sl,cl,fl="function"==typeof WeakMap?WeakMap:Map;function dl(e,t,n){(n=ao(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wu||(Wu=!0,Bu=r),ll(0,t)},n}function pl(e,t,n){(n=ao(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){ll(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){ll(0,t),"function"!=typeof r&&(null===Uu?Uu=new Set([this]):Uu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ml(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fl;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=Es.bind(null,e,t,n),t.then(e,e))}function hl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=ao(-1,1)).tag=2,oo(n,t))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}function bl(e,t){if(!Ro)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function yl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function vl(e,t,n){var r=t.pendingProps;switch(No(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return yl(t),null;case 1:case 17:return Ma(t.type)&&Ra(),yl(t),null;case 3:return r=t.stateNode,ti(),Ca(Ta),Ca(Pa),li(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Do(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==$o&&(os($o),$o=null))),yl(t),null;case 5:ri(t);var a=Jo(Zo.current);if(n=t.type,null!==e&&null!=t.stateNode)sl(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return yl(t),null}if(e=Jo(Xo.current),Do(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[da]=t,r[pa]=i,e=0!=(1&t.mode),n){case"dialog":jr("cancel",r),jr("close",r);break;case"iframe":case"object":case"embed":jr("load",r);break;case"video":case"audio":for(a=0;a<Lr.length;a++)jr(Lr[a],r);break;case"source":jr("error",r);break;case"img":case"image":case"link":jr("error",r),jr("load",r);break;case"details":jr("toggle",r);break;case"input":X(r,i),jr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},jr("invalid",r);break;case"textarea":ae(r,i),jr("invalid",r)}for(var u in ye(n,i),a=null,i)if(i.hasOwnProperty(u)){var s=i[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,s,e),a=["children",""+s]):l.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&jr("scroll",r)}switch(n){case"input":q(r),J(r,i,!0);break;case"textarea":q(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[da]=t,e[pa]=r,ul(e,t),t.stateNode=e;e:{switch(u=ve(n,r),n){case"dialog":jr("cancel",e),jr("close",e),a=r;break;case"iframe":case"object":case"embed":jr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Lr.length;a++)jr(Lr[a],e);a=r;break;case"source":jr("error",e),a=r;break;case"img":case"image":case"link":jr("error",e),jr("load",e),a=r;break;case"details":jr("toggle",e),a=r;break;case"input":X(e,r),a=G(e,r),jr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=F({},r,{value:void 0}),jr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),jr("invalid",e)}for(i in ye(n,a),s=a)if(s.hasOwnProperty(i)){var c=s[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&jr("scroll",e):null!=c&&v(e,i,c,u))}switch(n){case"input":q(e),J(e,r,!1);break;case"textarea":q(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return yl(t),null;case 6:if(e&&null!=t.stateNode)cl(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=Jo(Zo.current),Jo(Xo.current),Do(t)){if(r=t.stateNode,n=t.memoizedProps,r[da]=t,(i=r.nodeValue!==n)&&null!==(e=Oo))switch(e.tag){case 3:Zr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[da]=t,t.stateNode=r}return yl(t),null;case 13:if(Ca(ai),r=t.memoizedState,Ro&&null!==Mo&&0!=(1&t.mode)&&0==(128&t.flags)){for(r=Mo;r;)r=sa(r.nextSibling);return Wo(),t.flags|=98560,t}if(null!==r&&null!==r.dehydrated){if(r=Do(t),null===e){if(!r)throw Error(o(318));if(!(r=null!==(r=t.memoizedState)?r.dehydrated:null))throw Error(o(317));r[da]=t}else Wo(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;return yl(t),null}return null!==$o&&(os($o),$o=null),0!=(128&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?Do(t):n=null!==e.memoizedState,r!==n&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ai.current)?0===Ou&&(Ou=3):ms())),null!==t.updateQueue&&(t.flags|=4),yl(t),null);case 4:return ti(),null===e&&Br(t.stateNode.containerInfo),yl(t),null;case 10:return Xa(t.type._context),yl(t),null;case 19:if(Ca(ai),null===(i=t.memoizedState))return yl(t),null;if(r=0!=(128&t.flags),null===(u=i.rendering))if(r)bl(i,!1);else{if(0!==Ou||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=oi(e))){for(t.flags|=128,bl(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return _a(ai,1&ai.current|2),t.child}e=e.sibling}null!==i.tail&&Ye()>ju&&(t.flags|=128,r=!0,bl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=oi(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),bl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!Ro)return yl(t),null}else 2*Ye()-i.renderingStartTime>ju&&1073741824!==n&&(t.flags|=128,r=!0,bl(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ye(),t.sibling=null,n=ai.current,_a(ai,r?1&n|2:1&n),t):(yl(t),null);case 22:case 23:return cs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Tu)&&(yl(t),6&t.subtreeFlags&&(t.flags|=8192)):yl(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}ul=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},sl=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Jo(Xo.current);var o,i=null;switch(n){case"input":a=G(e,a),r=G(e,r),i=[];break;case"select":a=F({},a,{value:void 0}),r=F({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ye(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(o in u)!u.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in s)s.hasOwnProperty(o)&&u[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(i||(i=[]),i.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(i=i||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&jr("scroll",e),i||u===s||(i=[])):(i=i||[]).push(c,s))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},cl=function(e,t,n,r){n!==r&&(t.flags|=4)};var wl=w.ReactCurrentOwner,kl=!1;function xl(e,t,n,r){t.child=null===e?Ko(t,null,n,r):Qo(t,e.child,n,r)}function Sl(e,t,n,r,a){n=n.render;var o=t.ref;return Za(t,a),r=wi(e,t,n,r,o,a),n=ki(),null===e||kl?(Ro&&n&&To(t),t.flags|=1,xl(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Vl(e,t,a))}function El(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Os(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Rs(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Cl(e,t,o,r,a))}if(o=e.child,0==(e.lanes&a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return Vl(e,t,a)}return t.flags|=1,(e=Ms(o,r)).ref=t.ref,e.return=t,t.child=e}function Cl(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(ur(o,r)&&e.ref===t.ref){if(kl=!1,t.pendingProps=r=o,0==(e.lanes&a))return t.lanes=e.lanes,Vl(e,t,a);0!=(131072&e.flags)&&(kl=!0)}}return Pl(e,t,n,r,a)}function _l(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},_a(Nu,Tu),Tu|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,_a(Nu,Tu),Tu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,_a(Nu,Tu),Tu|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,_a(Nu,Tu),Tu|=r;return xl(e,t,a,n),t.child}function zl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Pl(e,t,n,r,a){var o=Ma(n)?Na:Pa.current;return o=Oa(t,o),Za(t,a),n=wi(e,t,n,r,o,a),r=ki(),null===e||kl?(Ro&&r&&To(t),t.flags|=1,xl(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Vl(e,t,a))}function Tl(e,t,n,r,a){if(Ma(n)){var o=!0;Ia(t)}else o=!1;if(Za(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ho(t,n,r),bo(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?Ja(s):Oa(t,s=Ma(n)?Na:Pa.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&go(t,i,r,s),to=!1;var d=t.memoizedState;i.state=d,uo(t,r,i,a),u=t.memoizedState,l!==r||d!==u||Ta.current||to?("function"==typeof c&&(fo(t,n,c,r),u=t.memoizedState),(l=to||mo(t,n,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,ro(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Va(t.type,l),i.props=s,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?Ja(u):Oa(t,u=Ma(n)?Na:Pa.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&go(t,i,r,u),to=!1,d=t.memoizedState,i.state=d,uo(t,r,i,a);var m=t.memoizedState;l!==f||d!==m||Ta.current||to?("function"==typeof p&&(fo(t,n,p,r),m=t.memoizedState),(s=to||mo(t,n,s,r,d,m,u)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Nl(e,t,n,r,o,a)}function Nl(e,t,n,r,a,o){zl(e,t);var i=0!=(128&t.flags);if(!r&&!i)return a&&Fa(t,n,!1),Vl(e,t,o);r=t.stateNode,wl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Qo(t,e.child,null,o),t.child=Qo(t,null,l,o)):xl(e,t,l,o),t.memoizedState=r.state,a&&Fa(t,n,!0),t.child}function Ol(e){var t=e.stateNode;t.pendingContext?$a(0,t.pendingContext,t.pendingContext!==t.context):t.context&&$a(0,t.context,!1),ei(e,t.containerInfo)}function Ml(e,t,n,r,a){return Wo(),Bo(a),t.flags|=256,xl(e,t,n,r),t.child}var Rl={dehydrated:null,treeContext:null,retryLane:0};function $l(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ll(e,t){return{baseLanes:e.baseLanes|t,cachePool:null,transitions:e.transitions}}function Il(e,t,n){var r,a=t.pendingProps,i=ai.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),_a(ai,1&i),null===e)return Ao(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(i=a.children,e=a.fallback,l?(a=t.mode,l=t.child,i={mode:"hidden",children:i},0==(1&a)&&null!==l?(l.childLanes=0,l.pendingProps=i):l=Ls(i,a,0,null),e=$s(e,a,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=$l(n),t.memoizedState=Rl,e):Fl(t,i));if(null!==(i=e.memoizedState)){if(null!==(r=i.dehydrated)){if(u)return 256&t.flags?(t.flags&=-257,Dl(e,t,n,Error(o(422)))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=a.fallback,i=t.mode,a=Ls({mode:"visible",children:a.children},i,0,null),(l=$s(l,i,n,null)).flags|=2,a.return=t,l.return=t,a.sibling=l,t.child=a,0!=(1&t.mode)&&Qo(t,e.child,null,n),t.child.memoizedState=$l(n),t.memoizedState=Rl,l);if(0==(1&t.mode))t=Dl(e,t,n,null);else if("$!"===r.data)t=Dl(e,t,n,Error(o(419)));else if(a=0!=(n&e.childLanes),kl||a){if(null!==(a=_u)){switch(n&-n){case 4:l=2;break;case 16:l=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:l=32;break;case 536870912:l=268435456;break;default:l=0}0!==(a=0!=(l&(a.suspendedLanes|n))?0:l)&&a!==i.retryLane&&(i.retryLane=a,Ju(e,a,-1))}ms(),t=Dl(e,t,n,Error(o(421)))}else"$?"===r.data?(t.flags|=128,t.child=e.child,t=_s.bind(null,e),r._reactRetry=t,t=null):(n=i.treeContext,Mo=sa(r.nextSibling),Oo=t,Ro=!0,$o=null,null!==n&&(xo[So++]=Co,xo[So++]=_o,xo[So++]=Eo,Co=n.id,_o=n.overflow,Eo=t),(t=Fl(t,t.pendingProps.children)).flags|=4096);return t}return l?(a=jl(e,t,a.children,a.fallback,n),l=t.child,i=e.child.memoizedState,l.memoizedState=null===i?$l(n):Ll(i,n),l.childLanes=e.childLanes&~n,t.memoizedState=Rl,a):(n=Al(e,t,a.children,n),t.memoizedState=null,n)}return l?(a=jl(e,t,a.children,a.fallback,n),l=t.child,i=e.child.memoizedState,l.memoizedState=null===i?$l(n):Ll(i,n),l.childLanes=e.childLanes&~n,t.memoizedState=Rl,a):(n=Al(e,t,a.children,n),t.memoizedState=null,n)}function Fl(e,t){return(t=Ls({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Al(e,t,n,r){var a=e.child;return e=a.sibling,n=Ms(a,{mode:"visible",children:n}),0==(1&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n}function jl(e,t,n,r,a){var o=t.mode,i=(e=e.child).sibling,l={mode:"hidden",children:n};return 0==(1&o)&&t.child!==e?((n=t.child).childLanes=0,n.pendingProps=l,t.deletions=null):(n=Ms(e,l)).subtreeFlags=14680064&e.subtreeFlags,null!==i?r=Ms(i,r):(r=$s(r,o,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Dl(e,t,n,r){return null!==r&&Bo(r),Qo(t,e.child,null,n),(e=Fl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Wl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ya(e.return,t,n)}function Bl(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Ul(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(xl(e,t,r.children,n),0!=(2&(r=ai.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Wl(e,n,t);else if(19===e.tag)Wl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(_a(ai,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===oi(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Bl(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===oi(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Bl(t,!0,n,null,o);break;case"together":Bl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Vl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ru|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Ms(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ms(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Hl(e,t){switch(No(t),t.tag){case 1:return Ma(t.type)&&Ra(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ti(),Ca(Ta),Ca(Pa),li(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ri(t),null;case 13:if(Ca(ai),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));Wo()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ca(ai),null;case 4:return ti(),null;case 10:return Xa(t.type._context),null;case 22:case 23:return cs(),null;default:return null}}var ql=!1,Ql=!1,Kl="function"==typeof WeakSet?WeakSet:Set,Gl=null;function Xl(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Ss(e,t,n)}else n.current=null}function Yl(e,t,n){try{n()}catch(n){Ss(e,t,n)}}var Zl=!1;function Jl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&Yl(t,n,o)}a=a.next}while(a!==r)}}function eu(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function tu(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function nu(e){var t=e.alternate;null!==t&&(e.alternate=null,nu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[da],delete t[pa],delete t[ha],delete t[ga],delete t[ba]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ru(e){return 5===e.tag||3===e.tag||4===e.tag}function au(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ru(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ou(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(ou(e,t,n),e=e.sibling;null!==e;)ou(e,t,n),e=e.sibling}function iu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(iu(e,t,n),e=e.sibling;null!==e;)iu(e,t,n),e=e.sibling}var lu=null,uu=!1;function su(e,t,n){for(n=n.child;null!==n;)cu(e,t,n),n=n.sibling}function cu(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Ql||Xl(n,t);case 6:var r=lu,a=uu;lu=null,su(e,t,n),uu=a,null!==(lu=r)&&(uu?(e=lu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):lu.removeChild(n.stateNode));break;case 18:null!==lu&&(uu?(e=lu,n=n.stateNode,8===e.nodeType?ua(e.parentNode,n):1===e.nodeType&&ua(e,n),Bt(e)):ua(lu,n.stateNode));break;case 4:r=lu,a=uu,lu=n.stateNode.containerInfo,uu=!0,su(e,t,n),lu=r,uu=a;break;case 0:case 11:case 14:case 15:if(!Ql&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(0!=(2&o)||0!=(4&o))&&Yl(n,t,i),a=a.next}while(a!==r)}su(e,t,n);break;case 1:if(!Ql&&(Xl(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Ss(n,t,e)}su(e,t,n);break;case 21:su(e,t,n);break;case 22:1&n.mode?(Ql=(r=Ql)||null!==n.memoizedState,su(e,t,n),Ql=r):su(e,t,n);break;default:su(e,t,n)}}function fu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Kl),t.forEach((function(t){var r=zs.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function du(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:lu=u.stateNode,uu=!1;break e;case 3:case 4:lu=u.stateNode.containerInfo,uu=!0;break e}u=u.return}if(null===lu)throw Error(o(160));cu(i,l,a),lu=null,uu=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){Ss(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)pu(t,e),t=t.sibling}function pu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(du(t,e),mu(e),4&r){try{Jl(3,e,e.return),eu(3,e)}catch(t){Ss(e,e.return,t)}try{Jl(5,e,e.return)}catch(t){Ss(e,e.return,t)}}break;case 1:du(t,e),mu(e),512&r&&null!==n&&Xl(n,n.return);break;case 5:if(du(t,e),mu(e),512&r&&null!==n&&Xl(n,n.return),32&e.flags){var a=e.stateNode;try{de(a,"")}catch(t){Ss(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===i.type&&null!=i.name&&Y(a,i),ve(u,l);var c=ve(u,i);for(l=0;l<s.length;l+=2){var f=s[l],d=s[l+1];"style"===f?ge(a,d):"dangerouslySetInnerHTML"===f?fe(a,d):"children"===f?de(a,d):v(a,f,d,c)}switch(u){case"input":Z(a,i);break;case"textarea":oe(a,i);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var m=i.value;null!=m?ne(a,!!i.multiple,m,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(a,!!i.multiple,i.defaultValue,!0):ne(a,!!i.multiple,i.multiple?[]:"",!1))}a[pa]=i}catch(t){Ss(e,e.return,t)}}break;case 6:if(du(t,e),mu(e),4&r){if(null===e.stateNode)throw Error(o(162));c=e.stateNode,f=e.memoizedProps;try{c.nodeValue=f}catch(t){Ss(e,e.return,t)}}break;case 3:if(du(t,e),mu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Bt(t.containerInfo)}catch(t){Ss(e,e.return,t)}break;case 4:default:du(t,e),mu(e);break;case 13:du(t,e),mu(e),8192&(c=e.child).flags&&null!==c.memoizedState&&(null===c.alternate||null===c.alternate.memoizedState)&&(Au=Ye()),4&r&&fu(e);break;case 22:if(c=null!==n&&null!==n.memoizedState,1&e.mode?(Ql=(f=Ql)||c,du(t,e),Ql=f):du(t,e),mu(e),8192&r){f=null!==e.memoizedState;e:for(d=null,p=e;;){if(5===p.tag){if(null===d){d=p;try{a=p.stateNode,f?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=p.stateNode,l=null!=(s=p.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=he("display",l))}catch(t){Ss(e,e.return,t)}}}else if(6===p.tag){if(null===d)try{p.stateNode.nodeValue=f?"":p.memoizedProps}catch(t){Ss(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;d===p&&(d=null),p=p.return}d===p&&(d=null),p.sibling.return=p.return,p=p.sibling}if(f&&!c&&0!=(1&e.mode))for(Gl=e,e=e.child;null!==e;){for(c=Gl=e;null!==Gl;){switch(d=(f=Gl).child,f.tag){case 0:case 11:case 14:case 15:Jl(4,f,f.return);break;case 1:if(Xl(f,f.return),"function"==typeof(i=f.stateNode).componentWillUnmount){p=f,m=f.return;try{a=p,i.props=a.memoizedProps,i.state=a.memoizedState,i.componentWillUnmount()}catch(e){Ss(p,m,e)}}break;case 5:Xl(f,f.return);break;case 22:if(null!==f.memoizedState){yu(c);continue}}null!==d?(d.return=f,Gl=d):yu(c)}e=e.sibling}}break;case 19:du(t,e),mu(e),4&r&&fu(e);case 21:}}function mu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ru(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(de(a,""),r.flags&=-33),iu(e,au(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;ou(e,au(e),i);break;default:throw Error(o(161))}}catch(t){Ss(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function hu(e,t,n){Gl=e,gu(e,t,n)}function gu(e,t,n){for(var r=0!=(1&e.mode);null!==Gl;){var a=Gl,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||ql;if(!i){var l=a.alternate,u=null!==l&&null!==l.memoizedState||Ql;l=ql;var s=Ql;if(ql=i,(Ql=u)&&!s)for(Gl=a;null!==Gl;)u=(i=Gl).child,22===i.tag&&null!==i.memoizedState?vu(a):null!==u?(u.return=i,Gl=u):vu(a);for(;null!==o;)Gl=o,gu(o,t,n),o=o.sibling;Gl=a,ql=l,Ql=s}bu(e)}else 0!=(8772&a.subtreeFlags)&&null!==o?(o.return=a,Gl=o):bu(e)}}function bu(e){for(;null!==Gl;){var t=Gl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Ql||eu(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Ql)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:Va(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&so(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}so(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Bt(d)}}}break;default:throw Error(o(163))}Ql||512&t.flags&&tu(t)}catch(e){Ss(t,t.return,e)}}if(t===e){Gl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Gl=n;break}Gl=t.return}}function yu(e){for(;null!==Gl;){var t=Gl;if(t===e){Gl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Gl=n;break}Gl=t.return}}function vu(e){for(;null!==Gl;){var t=Gl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{eu(4,t)}catch(e){Ss(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Ss(t,a,e)}}var o=t.return;try{tu(t)}catch(e){Ss(t,o,e)}break;case 5:var i=t.return;try{tu(t)}catch(e){Ss(t,i,e)}}}catch(e){Ss(t,t.return,e)}if(t===e){Gl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Gl=l;break}Gl=t.return}}var wu,ku=Math.ceil,xu=w.ReactCurrentDispatcher,Su=w.ReactCurrentOwner,Eu=w.ReactCurrentBatchConfig,Cu=0,_u=null,zu=null,Pu=0,Tu=0,Nu=Ea(0),Ou=0,Mu=null,Ru=0,$u=0,Lu=0,Iu=null,Fu=null,Au=0,ju=1/0,Du=null,Wu=!1,Bu=null,Uu=null,Vu=!1,Hu=null,qu=0,Qu=0,Ku=null,Gu=-1,Xu=0;function Yu(){return 0!=(6&Cu)?Ye():-1!==Gu?Gu:Gu=Ye()}function Zu(e){return 0==(1&e.mode)?1:0!=(2&Cu)&&0!==Pu?Pu&-Pu:null!==Ua.transition?(0===Xu&&(Xu=ht()),Xu):0!==(e=vt)?e:e=void 0===(e=window.event)?16:Xt(e.type)}function Ju(e,t,n){if(50<Qu)throw Qu=0,Ku=null,Error(o(185));var r=es(e,t);return null===r?null:(bt(r,t,n),0!=(2&Cu)&&r===_u||(r===_u&&(0==(2&Cu)&&($u|=t),4===Ou&&is(r,Pu)),ns(r,n),1===t&&0===Cu&&0==(1&e.mode)&&(ju=Ye()+500,ja&&Ba())),r)}function es(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function ts(e){return(null!==_u||null!==eo)&&0!=(1&e.mode)&&0==(2&Cu)}function ns(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-it(o),l=1<<i,u=a[i];-1===u?0!=(l&n)&&0==(l&r)||(a[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),o&=~l}}(e,t);var r=dt(e,e===_u?Pu:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){ja=!0,Wa(e)}(ls.bind(null,e)):Wa(ls.bind(null,e)),ia((function(){0===Cu&&Ba()})),n=null;else{switch(wt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ps(n,rs.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function rs(e,t){if(Gu=-1,Xu=0,0!=(6&Cu))throw Error(o(327));var n=e.callbackNode;if(ks()&&e.callbackNode!==n)return null;var r=dt(e,e===_u?Pu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=hs(e,r);else{t=r;var a=Cu;Cu|=2;var i=ps();for(_u===e&&Pu===t||(Du=null,ju=Ye()+500,fs(e,t));;)try{bs();break}catch(t){ds(e,t)}Ga(),xu.current=i,Cu=a,null!==zu?t=0:(_u=null,Pu=0,t=Ou)}if(0!==t){if(2===t&&0!==(a=mt(e))&&(r=a,t=as(e,a)),1===t)throw n=Mu,fs(e,0),is(e,r),ns(e,Ye()),n;if(6===t)is(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!lr(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=hs(e,r))&&0!==(i=mt(e))&&(r=i,t=as(e,i)),1===t))throw n=Mu,fs(e,0),is(e,r),ns(e,Ye()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:ws(e,Fu,Du);break;case 3:if(is(e,r),(130023424&r)===r&&10<(t=Au+500-Ye())){if(0!==dt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){Yu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(ws.bind(null,e,Fu,Du),t);break}ws(e,Fu,Du);break;case 4:if(is(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>a&&(a=l),r&=~i}if(r=a,10<(r=(120>(r=Ye()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ku(r/1960))-r)){e.timeoutHandle=ra(ws.bind(null,e,Fu,Du),r);break}ws(e,Fu,Du);break;default:throw Error(o(329))}}}return ns(e,Ye()),e.callbackNode===n?rs.bind(null,e):null}function as(e,t){var n=Iu;return e.current.memoizedState.isDehydrated&&(fs(e,t).flags|=256),2!==(e=hs(e,t))&&(t=Fu,Fu=n,null!==t&&os(t)),e}function os(e){null===Fu?Fu=e:Fu.push.apply(Fu,e)}function is(e,t){for(t&=~Lu,t&=~$u,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function ls(e){if(0!=(6&Cu))throw Error(o(327));ks();var t=dt(e,0);if(0==(1&t))return ns(e,Ye()),null;var n=hs(e,t);if(0!==e.tag&&2===n){var r=mt(e);0!==r&&(t=r,n=as(e,r))}if(1===n)throw n=Mu,fs(e,0),is(e,t),ns(e,Ye()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ws(e,Fu,Du),ns(e,Ye()),null}function us(e,t){var n=Cu;Cu|=1;try{return e(t)}finally{0===(Cu=n)&&(ju=Ye()+500,ja&&Ba())}}function ss(e){null!==Hu&&0===Hu.tag&&0==(6&Cu)&&ks();var t=Cu;Cu|=1;var n=Eu.transition,r=vt;try{if(Eu.transition=null,vt=1,e)return e()}finally{vt=r,Eu.transition=n,0==(6&(Cu=t))&&Ba()}}function cs(){Tu=Nu.current,Ca(Nu)}function fs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==zu)for(n=zu.return;null!==n;){var r=n;switch(No(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ra();break;case 3:ti(),Ca(Ta),Ca(Pa),li();break;case 5:ri(r);break;case 4:ti();break;case 13:case 19:Ca(ai);break;case 10:Xa(r.type._context);break;case 22:case 23:cs()}n=n.return}if(_u=e,zu=e=Ms(e.current,null),Pu=Tu=t,Ou=0,Mu=null,Lu=$u=Ru=0,Fu=Iu=null,null!==eo){for(t=0;t<eo.length;t++)if(null!==(r=(n=eo[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}n.pending=r}eo=null}return e}function ds(e,t){for(;;){var n=zu;try{if(Ga(),ui.current=nl,mi){for(var r=fi.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}mi=!1}if(ci=0,pi=di=fi=null,hi=!1,gi=0,Su.current=null,null===n||null===n.return){Ou=1,Mu=t,zu=null;break}e:{var i=e,l=n.return,u=n,s=t;if(t=Pu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var m=hl(l);if(null!==m){m.flags&=-257,gl(m,l,u,0,t),1&m.mode&&ml(i,c,t),s=c;var h=(t=m).updateQueue;if(null===h){var g=new Set;g.add(s),t.updateQueue=g}else h.add(s);break e}if(0==(1&t)){ml(i,c,t),ms();break e}s=Error(o(426))}else if(Ro&&1&u.mode){var b=hl(l);if(null!==b){0==(65536&b.flags)&&(b.flags|=256),gl(b,l,u,0,t),Bo(s);break e}}i=s,4!==Ou&&(Ou=2),null===Iu?Iu=[i]:Iu.push(i),s=il(s,u),u=l;do{switch(u.tag){case 3:u.flags|=65536,t&=-t,u.lanes|=t,lo(u,dl(0,s,t));break e;case 1:i=s;var y=u.type,v=u.stateNode;if(0==(128&u.flags)&&("function"==typeof y.getDerivedStateFromError||null!==v&&"function"==typeof v.componentDidCatch&&(null===Uu||!Uu.has(v)))){u.flags|=65536,t&=-t,u.lanes|=t,lo(u,pl(u,i,t));break e}}u=u.return}while(null!==u)}vs(n)}catch(e){t=e,zu===n&&null!==n&&(zu=n=n.return);continue}break}}function ps(){var e=xu.current;return xu.current=nl,null===e?nl:e}function ms(){0!==Ou&&3!==Ou&&2!==Ou||(Ou=4),null===_u||0==(268435455&Ru)&&0==(268435455&$u)||is(_u,Pu)}function hs(e,t){var n=Cu;Cu|=2;var r=ps();for(_u===e&&Pu===t||(Du=null,fs(e,t));;)try{gs();break}catch(t){ds(e,t)}if(Ga(),Cu=n,xu.current=r,null!==zu)throw Error(o(261));return _u=null,Pu=0,Ou}function gs(){for(;null!==zu;)ys(zu)}function bs(){for(;null!==zu&&!Ge();)ys(zu)}function ys(e){var t=wu(e.alternate,e,Tu);e.memoizedProps=e.pendingProps,null===t?vs(e):zu=t,Su.current=null}function vs(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=vl(n,t,Tu)))return void(zu=n)}else{if(null!==(n=Hl(n,t)))return n.flags&=32767,void(zu=n);if(null===e)return Ou=6,void(zu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(zu=t);zu=t=e}while(null!==t);0===Ou&&(Ou=5)}function ws(e,t,n){var r=vt,a=Eu.transition;try{Eu.transition=null,vt=1,function(e,t,n,r){do{ks()}while(null!==Hu);if(0!=(6&Cu))throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,i),e===_u&&(zu=_u=null,Pu=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Vu||(Vu=!0,Ps(tt,(function(){return ks(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Eu.transition,Eu.transition=null;var l=vt;vt=1;var u=Cu;Cu|=4,Su.current=null,function(e,t){if(ea=Vt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var m;d!==n||0!==a&&3!==d.nodeType||(u=l+a),d!==i||0!==r&&3!==d.nodeType||(s=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(m=d.firstChild);)p=d,d=m;for(;;){if(d===e)break t;if(p===n&&++c===a&&(u=l),p===i&&++f===r&&(s=l),null!==(m=d.nextSibling))break;p=(d=p).parentNode}d=m}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Vt=!1,Gl=t;null!==Gl;)if(e=(t=Gl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Gl=e;else for(;null!==Gl;){t=Gl;try{var h=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var g=h.memoizedProps,b=h.memoizedState,y=t.stateNode,v=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:Va(t.type,g),b);y.__reactInternalSnapshotBeforeUpdate=v}break;case 3:var w=t.stateNode.containerInfo;if(1===w.nodeType)w.textContent="";else if(9===w.nodeType){var k=w.body;null!=k&&(k.textContent="")}break;default:throw Error(o(163))}}catch(e){Ss(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Gl=e;break}Gl=t.return}h=Zl,Zl=!1}(e,n),pu(n,e),mr(ta),Vt=!!ea,ta=ea=null,e.current=n,hu(n,e,a),Xe(),Cu=u,vt=l,Eu.transition=i}else e.current=n;if(Vu&&(Vu=!1,Hu=e,qu=a),0===(i=e.pendingLanes)&&(Uu=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ns(e,Ye()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r(t[n]);if(Wu)throw Wu=!1,e=Bu,Bu=null,e;0!=(1&qu)&&0!==e.tag&&ks(),0!=(1&(i=e.pendingLanes))?e===Ku?Qu++:(Qu=0,Ku=e):Qu=0,Ba()}(e,t,n,r)}finally{Eu.transition=a,vt=r}return null}function ks(){if(null!==Hu){var e=wt(qu),t=Eu.transition,n=vt;try{if(Eu.transition=null,vt=16>e?16:e,null===Hu)var r=!1;else{if(e=Hu,Hu=null,qu=0,0!=(6&Cu))throw Error(o(331));var a=Cu;for(Cu|=4,Gl=e.current;null!==Gl;){var i=Gl,l=i.child;if(0!=(16&Gl.flags)){var u=i.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Gl=c;null!==Gl;){var f=Gl;switch(f.tag){case 0:case 11:case 15:Jl(8,f,i)}var d=f.child;if(null!==d)d.return=f,Gl=d;else for(;null!==Gl;){var p=(f=Gl).sibling,m=f.return;if(nu(f),f===c){Gl=null;break}if(null!==p){p.return=m,Gl=p;break}Gl=m}}}var h=i.alternate;if(null!==h){var g=h.child;if(null!==g){h.child=null;do{var b=g.sibling;g.sibling=null,g=b}while(null!==g)}}Gl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Gl=l;else e:for(;null!==Gl;){if(0!=(2048&(i=Gl).flags))switch(i.tag){case 0:case 11:case 15:Jl(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Gl=y;break e}Gl=i.return}}var v=e.current;for(Gl=v;null!==Gl;){var w=(l=Gl).child;if(0!=(2064&l.subtreeFlags)&&null!==w)w.return=l,Gl=w;else e:for(l=v;null!==Gl;){if(0!=(2048&(u=Gl).flags))try{switch(u.tag){case 0:case 11:case 15:eu(9,u)}}catch(e){Ss(u,u.return,e)}if(u===l){Gl=null;break e}var k=u.sibling;if(null!==k){k.return=u.return,Gl=k;break e}Gl=u.return}}if(Cu=a,Ba(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{vt=n,Eu.transition=t}}return!1}function xs(e,t,n){oo(e,t=dl(0,t=il(n,t),1)),t=Yu(),null!==(e=es(e,1))&&(bt(e,1,t),ns(e,t))}function Ss(e,t,n){if(3===e.tag)xs(e,e,n);else for(;null!==t;){if(3===t.tag){xs(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Uu||!Uu.has(r))){oo(t,e=pl(t,e=il(n,e),1)),e=Yu(),null!==(t=es(t,1))&&(bt(t,1,e),ns(t,e));break}}t=t.return}}function Es(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=Yu(),e.pingedLanes|=e.suspendedLanes&n,_u===e&&(Pu&n)===n&&(4===Ou||3===Ou&&(130023424&Pu)===Pu&&500>Ye()-Au?fs(e,0):Lu|=n),ns(e,t)}function Cs(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=Yu();null!==(e=es(e,t))&&(bt(e,t,n),ns(e,n))}function _s(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Cs(e,n)}function zs(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Cs(e,n)}function Ps(e,t){return Qe(e,t)}function Ts(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ns(e,t,n,r){return new Ts(e,t,n,r)}function Os(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ms(e,t){var n=e.alternate;return null===n?((n=Ns(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Rs(e,t,n,r,a,i){var l=2;if(r=e,"function"==typeof e)Os(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case S:return $s(n.children,a,i,t);case E:l=8,a|=8;break;case C:return(e=Ns(12,n,t,2|a)).elementType=C,e.lanes=i,e;case T:return(e=Ns(13,n,t,a)).elementType=T,e.lanes=i,e;case N:return(e=Ns(19,n,t,a)).elementType=N,e.lanes=i,e;case R:return Ls(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case _:l=10;break e;case z:l=9;break e;case P:l=11;break e;case O:l=14;break e;case M:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Ns(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function $s(e,t,n,r){return(e=Ns(7,e,r,t)).lanes=n,e}function Ls(e,t,n,r){return(e=Ns(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={},e}function Is(e,t,n){return(e=Ns(6,e,null,t)).lanes=n,e}function Fs(e,t,n){return(t=Ns(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function As(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function js(e,t,n,r,a,o,i,l,u){return e=new As(e,t,n,l,u),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Ns(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},no(o),e}function Ds(e){if(!e)return za;e:{if(Be(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ma(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Ma(n))return La(e,n,t)}return t}function Ws(e,t,n,r){var a=t.current,o=Yu(),i=Zu(a);return n=Ds(n),null===t.context?t.context=n:t.pendingContext=n,(t=ao(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),oo(a,t),null!==(e=Ju(a,i,o))&&io(e,a,i),i}function Bs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Us(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Vs(e,t){Us(e,t),(e=e.alternate)&&Us(e,t)}wu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ta.current)kl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return kl=!1,function(e,t,n){switch(t.tag){case 3:Ol(t),Wo();break;case 5:ni(t);break;case 1:Ma(t.type)&&Ia(t);break;case 4:ei(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;_a(Ha,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(_a(ai,1&ai.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Il(e,t,n):(_a(ai,1&ai.current),null!==(e=Vl(e,t,n))?e.sibling:null);_a(ai,1&ai.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Ul(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),_a(ai,ai.current),r)break;return null;case 22:case 23:return t.lanes=0,_l(e,t,n)}return Vl(e,t,n)}(e,t,n);kl=0!=(131072&e.flags)}else kl=!1,Ro&&0!=(1048576&t.flags)&&Po(t,ko,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps;var a=Oa(t,Pa.current);Za(t,n),a=wi(null,t,r,e,a,n);var i=ki();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ma(r)?(i=!0,Ia(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,no(t),a.updater=po,t.stateNode=a,a._reactInternals=t,bo(t,r,e,n),t=Nl(null,t,r,!0,i,n)):(t.tag=0,Ro&&i&&To(t),xl(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Os(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===O)return 14}return 2}(r),e=Va(r,e),a){case 0:t=Pl(null,t,r,e,n);break e;case 1:t=Tl(null,t,r,e,n);break e;case 11:t=Sl(null,t,r,e,n);break e;case 14:t=El(null,t,r,Va(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Pl(e,t,r,a=t.elementType===r?a:Va(r,a),n);case 1:return r=t.type,a=t.pendingProps,Tl(e,t,r,a=t.elementType===r?a:Va(r,a),n);case 3:e:{if(Ol(t),null===e)throw Error(o(387));r=t.pendingProps,a=(i=t.memoizedState).element,ro(e,t),uo(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Ml(e,t,r,n,a=Error(o(423)));break e}if(r!==a){t=Ml(e,t,r,n,a=Error(o(424)));break e}for(Mo=sa(t.stateNode.containerInfo.firstChild),Oo=t,Ro=!0,$o=null,n=Ko(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(Wo(),r===a){t=Vl(e,t,n);break e}xl(e,t,r,n)}t=t.child}return t;case 5:return ni(t),null===e&&Ao(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,na(r,a)?l=null:null!==i&&na(r,i)&&(t.flags|=32),zl(e,t),xl(e,t,l,n),t.child;case 6:return null===e&&Ao(t),null;case 13:return Il(e,t,n);case 4:return ei(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Qo(t,null,r,n):xl(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Sl(e,t,r,a=t.elementType===r?a:Va(r,a),n);case 7:return xl(e,t,t.pendingProps,n),t.child;case 8:case 12:return xl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,l=a.value,_a(Ha,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===a.children&&!Ta.current){t=Vl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===i.tag){(s=ao(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),Ya(i.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(o(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Ya(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}xl(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Za(t,n),r=r(a=Ja(a)),t.flags|=1,xl(e,t,r,n),t.child;case 14:return a=Va(r=t.type,t.pendingProps),El(e,t,r,a=Va(r.type,a),n);case 15:return Cl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Va(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,Ma(r)?(e=!0,Ia(t)):e=!1,Za(t,n),ho(t,r,a),bo(t,r,a,n),Nl(null,t,r,!0,e,n);case 19:return Ul(e,t,n);case 22:return _l(e,t,n)}throw Error(o(156,t.tag))};"function"==typeof reportError&&reportError;function Hs(e){this._internalRoot=e}function qs(e){this._internalRoot=e}function Qs(){}function Ks(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o;if("function"==typeof a){var l=a;a=function(){var e=Bs(i);l.call(e)}}Ws(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Bs(i);o.call(e)}}var i=function(e,t,n,r,a,o,i,l,u){return(e=js(n,r,!0,e,0,o,0,l,u)).context=Ds(null),n=e.current,(o=ao(r=Yu(),a=Zu(n))).callback=null!=t?t:null,oo(n,o),e.current.lanes=a,bt(e,a,r),ns(e,r),e}(t,r,e,0,null,!1,0,"",Qs);return e._reactRootContainer=i,e[ma]=i.current,Br(8===e.nodeType?e.parentNode:e),ss(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var l=r;r=function(){var e=Bs(u);l.call(e)}}var u=js(e,0,!1,null,0,!1,0,"",Qs);return e._reactRootContainer=u,e[ma]=u.current,Br(8===e.nodeType?e.parentNode:e),ss((function(){Ws(t,u,n,r)})),u}(n,t,e,a,r);return Bs(i)}qs.prototype.render=Hs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Ws(e,t,null,null)},qs.prototype.unmount=Hs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;ss((function(){Ws(null,e,null,null)})),t[ma]=null}},qs.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Rt.length&&0!==t&&t<Rt[n].priority;n++);Rt.splice(n,0,e),0===n&&Ft(e)}},kt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(yt(t,1|n),ns(t,Ye()),0==(6&Cu)&&(ju=Ye()+500,Ba()))}break;case 13:var r=Yu();ss((function(){return Ju(e,1,r)})),Vs(e,1)}},xt=function(e){13===e.tag&&(Ju(e,134217728,Yu()),Vs(e,134217728))},St=function(e){if(13===e.tag){var t=Yu(),n=Zu(e);Ju(e,n,t),Vs(e,n)}},Et=function(){return vt},Ct=function(e,t){var n=vt;try{return vt=e,t()}finally{vt=n}},xe=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ka(r);if(!a)throw Error(o(90));Q(r),Z(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=us,Te=ss;var Gs={findFiberByHostInstance:ya,bundleType:0,version:"18.1.0",rendererPackageName:"react-dom"},Xs={bundleType:Gs.bundleType,version:Gs.version,rendererPackageName:Gs.rendererPackageName,rendererConfig:Gs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:Gs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.1.0-next-22edb9f77-20220426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Ys=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Ys.isDisabled&&Ys.supportsFiber)try{at=Ys.inject(Xs),ot=Ys}catch(ce){}}t.render=function(e,t,n){if(!function(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}(t))throw Error(o(200));return Ks(null,e,t,!1,n)}},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},251:(e,t,n)=>{"use strict";var r=n(294),a=Symbol.for("react.element"),o=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,u={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)o.call(t,r)&&!l.hasOwnProperty(r)&&(u[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===u[r]&&(u[r]=t[r]);return{$$typeof:a,type:e,key:s,ref:c,props:u,_owner:i.current}}t.jsx=u,t.jsxs=u},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function y(){}function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=b.prototype;var w=v.prototype=new y;w.constructor=v,h(w,b.prototype),w.isPureReactComponent=!0;var k=Array.isArray,x=Object.prototype.hasOwnProperty,S={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,r){var a,o={},i=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)x.call(t,a)&&!E.hasOwnProperty(a)&&(o[a]=t[a]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===o[a]&&(o[a]=u[a]);return{$$typeof:n,type:e,key:i,ref:l,props:o,_owner:S.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var z=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===o?"."+P(u,0):o,k(i)?(a="",null!=e&&(a=e.replace(z,"$&/")+"/"),T(i,t,a,"",(function(e){return e}))):null!=i&&(_(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(z,"$&/")+"/")+e)),t.push(i)),1;if(u=0,o=""===o?".":o+":",k(e))for(var s=0;s<e.length;s++){var c=o+P(l=e[s],s);u+=T(l,t,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=T(l=l.value,t,a,c=o+P(l,s++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function N(e,t,n){if(null==e)return e;var r=[],a=0;return T(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function O(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var M={current:null},R={transition:null},$={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:R,ReactCurrentOwner:S};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!_(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=b,t.Fragment=a,t.Profiler=i,t.PureComponent=v,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=$,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=h({},e.props),o=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=S.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)x.call(t,s)&&!E.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:n,type:e.type,key:o,ref:i,props:a,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=R.transition;R.transition={};try{e()}finally{R.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return M.current.useCallback(e,t)},t.useContext=function(e){return M.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return M.current.useDeferredValue(e)},t.useEffect=function(e,t){return M.current.useEffect(e,t)},t.useId=function(){return M.current.useId()},t.useImperativeHandle=function(e,t,n){return M.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return M.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return M.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return M.current.useMemo(e,t)},t.useReducer=function(e,t,n){return M.current.useReducer(e,t,n)},t.useRef=function(e){return M.current.useRef(e)},t.useState=function(e){return M.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return M.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return M.current.useTransition()},t.version="18.1.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},893:(e,t,n)=>{"use strict";e.exports=n(251)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>o(u,n))s<a&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<a&&0>o(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var s=[],c=[],f=1,d=null,p=3,m=!1,h=!1,g=!1,b="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,v="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function k(e){if(g=!1,w(e),!h)if(null!==r(s))h=!0,R(x);else{var t=r(c);null!==t&&$(k,t.startTime-e)}}function x(e,n){h=!1,g&&(g=!1,y(_),_=-1),m=!0;var o=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!T());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var l=i(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(s)&&a(s),w(n)}else a(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&$(k,f.startTime-n),u=!1}return u}finally{d=null,p=o,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var S,E=!1,C=null,_=-1,z=5,P=-1;function T(){return!(t.unstable_now()-P<z)}function N(){if(null!==C){var e=t.unstable_now();P=e;var n=!0;try{n=C(!0,e)}finally{n?S():(E=!1,C=null)}}else E=!1}if("function"==typeof v)S=function(){v(N)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,M=O.port2;O.port1.onmessage=N,S=function(){M.postMessage(null)}}else S=function(){b(N,0)};function R(e){C=e,E||(E=!0,S())}function $(e,n){_=b((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,R(x))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):z=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(c,e),null===r(s)&&e===r(c)&&(g?(y(_),_=-1):g=!0,$(k,o-i))):(e.sortIndex=l,n(s,e),h||m||(h=!0,R(x))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},238:function(e,t,n){var r;!function(a,o){"use strict";var i="function",l="undefined",u="object",s="string",c="model",f="name",d="type",p="vendor",m="version",h="architecture",g="console",b="mobile",y="tablet",v="smarttv",w="wearable",k="embedded",x="Amazon",S="Apple",E="ASUS",C="BlackBerry",_="Google",z="Huawei",P="LG",T="Microsoft",N="Motorola",O="Samsung",M="Sony",R="Xiaomi",$="Zebra",L="Facebook",I=function(e){for(var t={},n=0;n<e.length;n++)t[e[n].toUpperCase()]=e[n];return t},F=function(e,t){return typeof e===s&&-1!==A(t).indexOf(A(e))},A=function(e){return e.toLowerCase()},j=function(e,t){if(typeof e===s)return e=e.replace(/^\s\s*/,"").replace(/\s\s*$/,""),typeof t===l?e:e.substring(0,255)},D=function(e,t){for(var n,r,a,l,s,c,f=0;f<t.length&&!s;){var d=t[f],p=t[f+1];for(n=r=0;n<d.length&&!s;)if(s=d[n++].exec(e))for(a=0;a<p.length;a++)c=s[++r],typeof(l=p[a])===u&&l.length>0?2===l.length?typeof l[1]==i?this[l[0]]=l[1].call(this,c):this[l[0]]=l[1]:3===l.length?typeof l[1]!==i||l[1].exec&&l[1].test?this[l[0]]=c?c.replace(l[1],l[2]):o:this[l[0]]=c?l[1].call(this,c,l[2]):o:4===l.length&&(this[l[0]]=c?l[3].call(this,c.replace(l[1],l[2])):o):this[l]=c||o;f+=2}},W=function(e,t){for(var n in t)if(typeof t[n]===u&&t[n].length>0){for(var r=0;r<t[n].length;r++)if(F(t[n][r],e))return"?"===n?o:n}else if(F(t[n],e))return"?"===n?o:n;return e},B={ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"},U={browser:[[/\b(?:crmo|crios)\/([\w\.]+)/i],[m,[f,"Chrome"]],[/edg(?:e|ios|a)?\/([\w\.]+)/i],[m,[f,"Edge"]],[/(opera mini)\/([-\w\.]+)/i,/(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,/(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i],[f,m],[/opios[\/ ]+([\w\.]+)/i],[m,[f,"Opera Mini"]],[/\bopr\/([\w\.]+)/i],[m,[f,"Opera"]],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,/(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,/(ba?idubrowser)[\/ ]?([\w\.]+)/i,/(?:ms|\()(ie) ([\w\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq)\/([-\w\.]+)/i,/(weibo)__([\d\.]+)/i],[f,m],[/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],[m,[f,"UCBrowser"]],[/\bqbcore\/([\w\.]+)/i],[m,[f,"WeChat(Win) Desktop"]],[/micromessenger\/([\w\.]+)/i],[m,[f,"WeChat"]],[/konqueror\/([\w\.]+)/i],[m,[f,"Konqueror"]],[/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],[m,[f,"IE"]],[/yabrowser\/([\w\.]+)/i],[m,[f,"Yandex"]],[/(avast|avg)\/([\w\.]+)/i],[[f,/(.+)/,"$1 Secure Browser"],m],[/\bfocus\/([\w\.]+)/i],[m,[f,"Firefox Focus"]],[/\bopt\/([\w\.]+)/i],[m,[f,"Opera Touch"]],[/coc_coc\w+\/([\w\.]+)/i],[m,[f,"Coc Coc"]],[/dolfin\/([\w\.]+)/i],[m,[f,"Dolphin"]],[/coast\/([\w\.]+)/i],[m,[f,"Opera Coast"]],[/miuibrowser\/([\w\.]+)/i],[m,[f,"MIUI Browser"]],[/fxios\/([-\w\.]+)/i],[m,[f,"Firefox"]],[/\bqihu|(qi?ho?o?|360)browser/i],[[f,"360 Browser"]],[/(oculus|samsung|sailfish)browser\/([\w\.]+)/i],[[f,/(.+)/,"$1 Browser"],m],[/(comodo_dragon)\/([\w\.]+)/i],[[f,/_/g," "],m],[/(electron)\/([\w\.]+) safari/i,/(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,/m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i],[f,m],[/(metasr)[\/ ]?([\w\.]+)/i,/(lbbrowser)/i],[f],[/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],[[f,L],m],[/safari (line)\/([\w\.]+)/i,/\b(line)\/([\w\.]+)\/iab/i,/(chromium|instagram)[\/ ]([-\w\.]+)/i],[f,m],[/\bgsa\/([\w\.]+) .*safari\//i],[m,[f,"GSA"]],[/headlesschrome(?:\/([\w\.]+)| )/i],[m,[f,"Chrome Headless"]],[/ wv\).+(chrome)\/([\w\.]+)/i],[[f,"Chrome WebView"],m],[/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],[m,[f,"Android Browser"]],[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],[f,m],[/version\/([\w\.]+) .*mobile\/\w+ (safari)/i],[m,[f,"Mobile Safari"]],[/version\/([\w\.]+) .*(mobile ?safari|safari)/i],[m,f],[/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],[f,[m,W,{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}]],[/(webkit|khtml)\/([\w\.]+)/i],[f,m],[/(navigator|netscape\d?)\/([-\w\.]+)/i],[[f,"Netscape"],m],[/mobile vr; rv:([\w\.]+)\).+firefox/i],[m,[f,"Firefox Reality"]],[/ekiohf.+(flow)\/([\w\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,/(firefox)\/([\w\.]+)/i,/(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,/(links) \(([\w\.]+)/i],[f,m]],cpu:[[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],[[h,"amd64"]],[/(ia32(?=;))/i],[[h,A]],[/((?:i[346]|x)86)[;\)]/i],[[h,"ia32"]],[/\b(aarch64|arm(v?8e?l?|_?64))\b/i],[[h,"arm64"]],[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],[[h,"armhf"]],[/windows (ce|mobile); ppc;/i],[[h,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],[[h,/ower/,"",A]],[/(sun4\w)[;\)]/i],[[h,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],[[h,A]]],device:[[/\b(sch-i[89]0\d|shw-m380s|sm-[pt]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i],[c,[p,O],[d,y]],[/\b((?:s[cgp]h|gt|sm)-\w+|galaxy nexus)/i,/samsung[- ]([-\w]+)/i,/sec-(sgh\w+)/i],[c,[p,O],[d,b]],[/\((ip(?:hone|od)[\w ]*);/i],[c,[p,S],[d,b]],[/\((ipad);[-\w\),; ]+apple/i,/applecoremedia\/[\w\.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i],[c,[p,S],[d,y]],[/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i],[c,[p,z],[d,y]],[/(?:huawei|honor)([-\w ]+)[;\)]/i,/\b(nexus 6p|\w{2,4}-[atu]?[ln][01259x][012359][an]?)\b(?!.+d\/s)/i],[c,[p,z],[d,b]],[/\b(poco[\w ]+)(?: bui|\))/i,/\b; (\w+) build\/hm\1/i,/\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,/\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,/\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i],[[c,/_/g," "],[p,R],[d,b]],[/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i],[[c,/_/g," "],[p,R],[d,y]],[/; (\w+) bui.+ oppo/i,/\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i],[c,[p,"OPPO"],[d,b]],[/vivo (\w+)(?: bui|\))/i,/\b(v[12]\d{3}\w?[at])(?: bui|;)/i],[c,[p,"Vivo"],[d,b]],[/\b(rmx[12]\d{3})(?: bui|;|\))/i],[c,[p,"Realme"],[d,b]],[/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,/\bmot(?:orola)?[- ](\w*)/i,/((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i],[c,[p,N],[d,b]],[/\b(mz60\d|xoom[2 ]{0,2}) build\//i],[c,[p,N],[d,y]],[/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],[c,[p,P],[d,y]],[/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,/\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,/\blg-?([\d\w]+) bui/i],[c,[p,P],[d,b]],[/(ideatab[-\w ]+)/i,/lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i],[c,[p,"Lenovo"],[d,y]],[/(?:maemo|nokia).*(n900|lumia \d+)/i,/nokia[-_ ]?([-\w\.]*)/i],[[c,/_/g," "],[p,"Nokia"],[d,b]],[/(pixel c)\b/i],[c,[p,_],[d,y]],[/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],[c,[p,_],[d,b]],[/droid.+ ([c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[c,[p,M],[d,b]],[/sony tablet [ps]/i,/\b(?:sony)?sgp\w+(?: bui|\))/i],[[c,"Xperia Tablet"],[p,M],[d,y]],[/ (kb2005|in20[12]5|be20[12][59])\b/i,/(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i],[c,[p,"OnePlus"],[d,b]],[/(alexa)webm/i,/(kf[a-z]{2}wi)( bui|\))/i,/(kf[a-z]+)( bui|\)).+silk\//i],[c,[p,x],[d,y]],[/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],[[c,/(.+)/g,"Fire Phone $1"],[p,x],[d,b]],[/(playbook);[-\w\),; ]+(rim)/i],[c,p,[d,y]],[/\b((?:bb[a-f]|st[hv])100-\d)/i,/\(bb10; (\w+)/i],[c,[p,C],[d,b]],[/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i],[c,[p,E],[d,y]],[/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],[c,[p,E],[d,b]],[/(nexus 9)/i],[c,[p,"HTC"],[d,y]],[/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,/(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,/(alcatel|geeksphone|nexian|panasonic|sony)[-_ ]?([-\w]*)/i],[p,[c,/_/g," "],[d,b]],[/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],[c,[p,"Acer"],[d,y]],[/droid.+; (m[1-5] note) bui/i,/\bmz-([-\w]{2,})/i],[c,[p,"Meizu"],[d,b]],[/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],[c,[p,"Sharp"],[d,b]],[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,/(hp) ([\w ]+\w)/i,/(asus)-?(\w+)/i,/(microsoft); (lumia[\w ]+)/i,/(lenovo)[-_ ]?([-\w]+)/i,/(jolla)/i,/(oppo) ?([\w ]+) bui/i],[p,c,[d,b]],[/(archos) (gamepad2?)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\/([\w\.]+)/i,/(nook)[\w ]+build\/(\w+)/i,/(dell) (strea[kpr\d ]*[\dko])/i,/(le[- ]+pan)[- ]+(\w{1,9}) bui/i,/(trinity)[- ]*(t\d{3}) bui/i,/(gigaset)[- ]+(q\w{1,9}) bui/i,/(vodafone) ([\w ]+)(?:\)| bui)/i],[p,c,[d,y]],[/(surface duo)/i],[c,[p,T],[d,y]],[/droid [\d\.]+; (fp\du?)(?: b|\))/i],[c,[p,"Fairphone"],[d,b]],[/(u304aa)/i],[c,[p,"AT&T"],[d,b]],[/\bsie-(\w*)/i],[c,[p,"Siemens"],[d,b]],[/\b(rct\w+) b/i],[c,[p,"RCA"],[d,y]],[/\b(venue[\d ]{2,7}) b/i],[c,[p,"Dell"],[d,y]],[/\b(q(?:mv|ta)\w+) b/i],[c,[p,"Verizon"],[d,y]],[/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],[c,[p,"Barnes & Noble"],[d,y]],[/\b(tm\d{3}\w+) b/i],[c,[p,"NuVision"],[d,y]],[/\b(k88) b/i],[c,[p,"ZTE"],[d,y]],[/\b(nx\d{3}j) b/i],[c,[p,"ZTE"],[d,b]],[/\b(gen\d{3}) b.+49h/i],[c,[p,"Swiss"],[d,b]],[/\b(zur\d{3}) b/i],[c,[p,"Swiss"],[d,y]],[/\b((zeki)?tb.*\b) b/i],[c,[p,"Zeki"],[d,y]],[/\b([yr]\d{2}) b/i,/\b(dragon[- ]+touch |dt)(\w{5}) b/i],[[p,"Dragon Touch"],c,[d,y]],[/\b(ns-?\w{0,9}) b/i],[c,[p,"Insignia"],[d,y]],[/\b((nxa|next)-?\w{0,9}) b/i],[c,[p,"NextBook"],[d,y]],[/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],[[p,"Voice"],c,[d,b]],[/\b(lvtel\-)?(v1[12]) b/i],[[p,"LvTel"],c,[d,b]],[/\b(ph-1) /i],[c,[p,"Essential"],[d,b]],[/\b(v(100md|700na|7011|917g).*\b) b/i],[c,[p,"Envizen"],[d,y]],[/\b(trio[-\w\. ]+) b/i],[c,[p,"MachSpeed"],[d,y]],[/\btu_(1491) b/i],[c,[p,"Rotor"],[d,y]],[/(shield[\w ]+) b/i],[c,[p,"Nvidia"],[d,y]],[/(sprint) (\w+)/i],[p,c,[d,b]],[/(kin\.[onetw]{3})/i],[[c,/\./g," "],[p,T],[d,b]],[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],[c,[p,$],[d,y]],[/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],[c,[p,$],[d,b]],[/(ouya)/i,/(nintendo) ([wids3utch]+)/i],[p,c,[d,g]],[/droid.+; (shield) bui/i],[c,[p,"Nvidia"],[d,g]],[/(playstation [345portablevi]+)/i],[c,[p,M],[d,g]],[/\b(xbox(?: one)?(?!; xbox))[\); ]/i],[c,[p,T],[d,g]],[/smart-tv.+(samsung)/i],[p,[d,v]],[/hbbtv.+maple;(\d+)/i],[[c,/^/,"SmartTV"],[p,O],[d,v]],[/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],[[p,P],[d,v]],[/(apple) ?tv/i],[p,[c,"Apple TV"],[d,v]],[/crkey/i],[[c,"Chromecast"],[p,_],[d,v]],[/droid.+aft(\w)( bui|\))/i],[c,[p,x],[d,v]],[/\(dtv[\);].+(aquos)/i],[c,[p,"Sharp"],[d,v]],[/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,/hbbtv\/\d+\.\d+\.\d+ +\([\w ]*; *(\w[^;]*);([^;]*)/i],[[p,j],[c,j],[d,v]],[/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],[[d,v]],[/((pebble))app/i],[p,c,[d,w]],[/droid.+; (glass) \d/i],[c,[p,_],[d,w]],[/droid.+; (wt63?0{2,3})\)/i],[c,[p,$],[d,w]],[/(quest( 2)?)/i],[c,[p,L],[d,w]],[/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],[p,[d,k]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i],[c,[d,b]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],[c,[d,y]],[/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],[[d,y]],[/(phone|mobile(?:[;\/]| safari)|pda(?=.+windows ce))/i],[[d,b]],[/(android[-\w\. ]{0,9});.+buil/i],[c,[p,"Generic"]]],engine:[[/windows.+ edge\/([\w\.]+)/i],[m,[f,"EdgeHTML"]],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[m,[f,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,/ekioh(flow)\/([\w\.]+)/i,/(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,/(icab)[\/ ]([23]\.[\d\.]+)/i],[f,m],[/rv\:([\w\.]{1,9})\b.+(gecko)/i],[m,f]],os:[[/microsoft (windows) (vista|xp)/i],[f,m],[/(windows) nt 6\.2; (arm)/i,/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,/(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i],[f,[m,W,B]],[/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i],[[f,"Windows"],[m,W,B]],[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/cfnetwork\/.+darwin/i],[[m,/_/g,"."],[f,"iOS"]],[/(mac os x) ?([\w\. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i],[[f,"Mac OS"],[m,/_/g,"."]],[/droid ([\w\.]+)\b.+(android[- ]x86)/i],[m,f],[/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,/(blackberry)\w*\/([\w\.]*)/i,/(tizen|kaios)[\/ ]([\w\.]+)/i,/\((series40);/i],[f,m],[/\(bb(10);/i],[m,[f,C]],[/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],[m,[f,"Symbian"]],[/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i],[m,[f,"Firefox OS"]],[/web0s;.+rt(tv)/i,/\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],[m,[f,"webOS"]],[/crkey\/([\d\.]+)/i],[m,[f,"Chromecast"]],[/(cros) [\w]+ ([\w\.]+\w)/i],[[f,"Chromium OS"],m],[/(nintendo|playstation) ([wids345portablevuch]+)/i,/(xbox); +xbox ([^\);]+)/i,/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,/(mint)[\/\(\) ]?(\w*)/i,/(mageia|vectorlinux)[; ]/i,/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,/(hurd|linux) ?([\w\.]*)/i,/(gnu) ?([\w\.]*)/i,/\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,/(haiku) (\w+)/i],[f,m],[/(sunos) ?([\w\.\d]*)/i],[[f,"Solaris"],m],[/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,/(aix) ((\d)(?=\.|\)| )[\w\.])*/i,/\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,/(unix) ?([\w\.]*)/i],[f,m]]},V=function(e,t){if(typeof e===u&&(t=e,e=o),!(this instanceof V))return new V(e,t).getResult();var n=e||(typeof a!==l&&a.navigator&&a.navigator.userAgent?a.navigator.userAgent:""),r=t?function(e,t){var n={};for(var r in e)t[r]&&t[r].length%2==0?n[r]=t[r].concat(e[r]):n[r]=e[r];return n}(U,t):U;return this.getBrowser=function(){var e,t={};return t.name=o,t.version=o,D.call(t,n,r.browser),t.major=typeof(e=t.version)===s?e.replace(/[^\d\.]/g,"").split(".")[0]:o,t},this.getCPU=function(){var e={};return e.architecture=o,D.call(e,n,r.cpu),e},this.getDevice=function(){var e={};return e.vendor=o,e.model=o,e.type=o,D.call(e,n,r.device),e},this.getEngine=function(){var e={};return e.name=o,e.version=o,D.call(e,n,r.engine),e},this.getOS=function(){var e={};return e.name=o,e.version=o,D.call(e,n,r.os),e},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return n},this.setUA=function(e){return n=typeof e===s&&e.length>255?j(e,255):e,this},this.setUA(n),this};V.VERSION="1.0.2",V.BROWSER=I([f,m,"major"]),V.CPU=I([h]),V.DEVICE=I([c,p,d,g,b,v,y,w,k]),V.ENGINE=V.OS=I([f,m]),typeof t!==l?(e.exports&&(t=e.exports=V),t.UAParser=V):n.amdO?(r=function(){return V}.call(t,n,t,e))===o||(e.exports=r):typeof a!==l&&(a.UAParser=V);var H=typeof a!==l&&(a.jQuery||a.Zepto);if(H&&!H.ua){var q=new V;H.ua=q.getResult(),H.ua.get=function(){return q.getUA()},H.ua.set=function(e){q.setUA(e);var t=q.getResult();for(var n in t)H.ua[n]=t[n]}}}("object"==typeof window?window:this)}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={exports:{}};return n[e].call(o.exports,o,o.exports,a),o.exports}a.amdO={},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,a.d(o,i),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=a(294),t=a.t(e,2),n=a(935);function r(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}function i(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=i(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function l(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=i(e))&&(r&&(r+=" "),r+=t);return r}const u={xs:0,sm:600,md:900,lg:1200,xl:1536},s={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${u[e]}px)`};function c(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||s;return t.reduce(((r,a,o)=>(r[e.up(e.keys[o])]=n(t[o]),r)),{})}if("object"==typeof t){const e=r.breakpoints||s;return Object.keys(t).reduce(((r,a)=>{if(-1!==Object.keys(e.values||u).indexOf(a))r[e.up(a)]=n(t[a],a);else{const e=a;r[e]=t[e]}return r}),{})}return n(t)}function f({values:e,breakpoints:t,base:n}){const r=n||function(e,t){if("object"!=typeof e)return{};const n={},r=Object.keys(t);return Array.isArray(e)?r.forEach(((t,r)=>{r<e.length&&(n[t]=!0)})):r.forEach((t=>{null!=e[t]&&(n[t]=!0)})),n}(e,t),a=Object.keys(r);if(0===a.length)return e;let o;return a.reduce(((t,n,r)=>(Array.isArray(e)?(t[n]=null!=e[r]?e[r]:e[o],o=r):(t[n]=null!=e[n]?e[n]:e[o]||e,o=n),t)),{})}function d(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function p(e,t,n={clone:!0}){const r=n.clone?o({},e):e;return d(e)&&d(t)&&Object.keys(t).forEach((a=>{"__proto__"!==a&&(d(t[a])&&a in e&&d(e[a])?r[a]=p(e[a],t[a],n):r[a]=t[a])})),r}function m(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}function h(e){if("string"!=typeof e)throw new Error(m(7));return e.charAt(0).toUpperCase()+e.slice(1)}function g(e,t){if(!t||"string"!=typeof t)return null;if(e&&e.vars){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function b(e,t,n,r=n){let a;return a="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:g(e,n)||r,t&&(a=t(a)),a}const y=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:a}=e,o=e=>{if(null==e[t])return null;const o=e[t],i=g(e.theme,r)||{};return c(e,o,(e=>{let r=b(i,a,e);return e===r&&"string"==typeof e&&(r=b(i,a,`${t}${"default"===e?"":h(e)}`,e)),!1===n?r:{[n]:r}}))};return o.propTypes={},o.filterProps=[t],o},v=function(e,t){return t?p(e,t,{clone:!1}):e},w=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?v(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n},k={m:"margin",p:"padding"},x={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},S={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},E=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!S[e])return[e];e=S[e]}const[t,n]=e.split(""),r=k[t],a=x[n]||"";return Array.isArray(a)?a.map((e=>r+e)):[r+a]})(e)),t[e])}(),C=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],_=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],z=[...C,..._];function P(e,t,n,r){var a;const o=null!=(a=g(e,t))?a:n;return"number"==typeof o?e=>"string"==typeof e?e:o*e:Array.isArray(o)?e=>"string"==typeof e?e:o[e]:"function"==typeof o?o:()=>{}}function T(e){return P(e,"spacing",8)}function N(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function O(e,t){const n=T(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(-1===t.indexOf(n))return null;const a=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=N(t,n),e)),{})}(E(n),r);return c(e,e[n],a)}(e,t,r,n))).reduce(v,{})}function M(e){return O(e,C)}function R(e){return O(e,_)}function $(e){return O(e,z)}M.propTypes={},M.filterProps=C,R.propTypes={},R.filterProps=_,$.propTypes={},$.filterProps=z;const L=$;function I(e){return"number"!=typeof e?e:`${e}px solid`}const F=y({prop:"border",themeKey:"borders",transform:I}),A=y({prop:"borderTop",themeKey:"borders",transform:I}),j=y({prop:"borderRight",themeKey:"borders",transform:I}),D=y({prop:"borderBottom",themeKey:"borders",transform:I}),W=y({prop:"borderLeft",themeKey:"borders",transform:I}),B=y({prop:"borderColor",themeKey:"palette"}),U=y({prop:"borderTopColor",themeKey:"palette"}),V=y({prop:"borderRightColor",themeKey:"palette"}),H=y({prop:"borderBottomColor",themeKey:"palette"}),q=y({prop:"borderLeftColor",themeKey:"palette"}),Q=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=P(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:N(t,e)});return c(e,e.borderRadius,n)}return null};Q.propTypes={},Q.filterProps=["borderRadius"];const K=w(F,A,j,D,W,B,U,V,H,q,Q),G=w(y({prop:"displayPrint",cssProperty:!1,transform:e=>({"@media print":{display:e}})}),y({prop:"display"}),y({prop:"overflow"}),y({prop:"textOverflow"}),y({prop:"visibility"}),y({prop:"whiteSpace"})),X=w(y({prop:"flexBasis"}),y({prop:"flexDirection"}),y({prop:"flexWrap"}),y({prop:"justifyContent"}),y({prop:"alignItems"}),y({prop:"alignContent"}),y({prop:"order"}),y({prop:"flex"}),y({prop:"flexGrow"}),y({prop:"flexShrink"}),y({prop:"alignSelf"}),y({prop:"justifyItems"}),y({prop:"justifySelf"})),Y=e=>{if(void 0!==e.gap&&null!==e.gap){const t=P(e.theme,"spacing",8),n=e=>({gap:N(t,e)});return c(e,e.gap,n)}return null};Y.propTypes={},Y.filterProps=["gap"];const Z=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=P(e.theme,"spacing",8),n=e=>({columnGap:N(t,e)});return c(e,e.columnGap,n)}return null};Z.propTypes={},Z.filterProps=["columnGap"];const J=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=P(e.theme,"spacing",8),n=e=>({rowGap:N(t,e)});return c(e,e.rowGap,n)}return null};J.propTypes={},J.filterProps=["rowGap"];const ee=w(Y,Z,J,y({prop:"gridColumn"}),y({prop:"gridRow"}),y({prop:"gridAutoFlow"}),y({prop:"gridAutoColumns"}),y({prop:"gridAutoRows"}),y({prop:"gridTemplateColumns"}),y({prop:"gridTemplateRows"}),y({prop:"gridTemplateAreas"}),y({prop:"gridArea"})),te=w(y({prop:"position"}),y({prop:"zIndex",themeKey:"zIndex"}),y({prop:"top"}),y({prop:"right"}),y({prop:"bottom"}),y({prop:"left"})),ne=w(y({prop:"color",themeKey:"palette"}),y({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette"}),y({prop:"backgroundColor",themeKey:"palette"})),re=y({prop:"boxShadow",themeKey:"shadows"});function ae(e){return e<=1&&0!==e?100*e+"%":e}const oe=y({prop:"width",transform:ae}),ie=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r,a;return{maxWidth:(null==(n=e.theme)||null==(r=n.breakpoints)||null==(a=r.values)?void 0:a[t])||u[t]||ae(t)}};return c(e,e.maxWidth,t)}return null};ie.filterProps=["maxWidth"];const le=y({prop:"minWidth",transform:ae}),ue=y({prop:"height",transform:ae}),se=y({prop:"maxHeight",transform:ae}),ce=y({prop:"minHeight",transform:ae}),fe=(y({prop:"size",cssProperty:"width",transform:ae}),y({prop:"size",cssProperty:"height",transform:ae}),w(oe,ie,le,ue,se,ce,y({prop:"boxSizing"}))),de=y({prop:"fontFamily",themeKey:"typography"}),pe=y({prop:"fontSize",themeKey:"typography"}),me=y({prop:"fontStyle",themeKey:"typography"}),he=y({prop:"fontWeight",themeKey:"typography"}),ge=y({prop:"letterSpacing"}),be=y({prop:"textTransform"}),ye=y({prop:"lineHeight"}),ve=y({prop:"textAlign"}),we=w(y({prop:"typography",cssProperty:!1,themeKey:"typography"}),de,pe,me,he,ge,ye,ve,be),ke={borders:K.filterProps,display:G.filterProps,flexbox:X.filterProps,grid:ee.filterProps,positions:te.filterProps,palette:ne.filterProps,shadows:re.filterProps,sizing:fe.filterProps,spacing:L.filterProps,typography:we.filterProps},xe={borders:K,display:G,flexbox:X,grid:ee,positions:te,palette:ne,shadows:re,sizing:fe,spacing:L,typography:we},Se=Object.keys(ke).reduce(((e,t)=>(ke[t].forEach((n=>{e[n]=xe[t]})),e)),{}),Ee=["sx"];function Ce(e){const{sx:t}=e,n=r(e,Ee),{systemProps:a,otherProps:i}=(e=>{const t={systemProps:{},otherProps:{}};return Object.keys(e).forEach((n=>{Se[n]?t.systemProps[n]=e[n]:t.otherProps[n]=e[n]})),t})(n);let l;return l=Array.isArray(t)?[a,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return d(n)?o({},a,n):a}:o({},a,t),o({},i,{sx:l})}function _e(e,t,n){const r={};return Object.keys(e).forEach((a=>{r[a]=e[a].reduce(((e,r)=>(r&&(n&&n[r]&&e.push(n[r]),e.push(t(r))),e)),[]).join(" ")})),r}const ze=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}};var Pe=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const Te=ze((function(e){return Pe.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var Ne=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),Oe=Math.abs,Me=String.fromCharCode,Re=Object.assign;function $e(e){return e.trim()}function Le(e,t,n){return e.replace(t,n)}function Ie(e,t){return e.indexOf(t)}function Fe(e,t){return 0|e.charCodeAt(t)}function Ae(e,t,n){return e.slice(t,n)}function je(e){return e.length}function De(e){return e.length}function We(e,t){return t.push(e),e}var Be=1,Ue=1,Ve=0,He=0,qe=0,Qe="";function Ke(e,t,n,r,a,o,i){return{value:e,root:t,parent:n,type:r,props:a,children:o,line:Be,column:Ue,length:i,return:""}}function Ge(e,t){return Re(Ke("",null,null,"",null,null,0),e,{length:-e.length},t)}function Xe(){return qe=He>0?Fe(Qe,--He):0,Ue--,10===qe&&(Ue=1,Be--),qe}function Ye(){return qe=He<Ve?Fe(Qe,He++):0,Ue++,10===qe&&(Ue=1,Be++),qe}function Ze(){return Fe(Qe,He)}function Je(){return He}function et(e,t){return Ae(Qe,e,t)}function tt(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function nt(e){return Be=Ue=1,Ve=je(Qe=e),He=0,[]}function rt(e){return Qe="",e}function at(e){return $e(et(He-1,lt(91===e?e+2:40===e?e+1:e)))}function ot(e){for(;(qe=Ze())&&qe<33;)Ye();return tt(e)>2||tt(qe)>3?"":" "}function it(e,t){for(;--t&&Ye()&&!(qe<48||qe>102||qe>57&&qe<65||qe>70&&qe<97););return et(e,Je()+(t<6&&32==Ze()&&32==Ye()))}function lt(e){for(;Ye();)switch(qe){case e:return He;case 34:case 39:34!==e&&39!==e&&lt(qe);break;case 40:41===e&&lt(e);break;case 92:Ye()}return He}function ut(e,t){for(;Ye()&&e+qe!==57&&(e+qe!==84||47!==Ze()););return"/*"+et(t,He-1)+"*"+Me(47===e?e:Ye())}function st(e){for(;!tt(Ze());)Ye();return et(e,He)}var ct="-ms-",ft="-moz-",dt="-webkit-",pt="comm",mt="rule",ht="decl",gt="@keyframes";function bt(e,t){for(var n="",r=De(e),a=0;a<r;a++)n+=t(e[a],a,e,t)||"";return n}function yt(e,t,n,r){switch(e.type){case"@import":case ht:return e.return=e.return||e.value;case pt:return"";case gt:return e.return=e.value+"{"+bt(e.children,r)+"}";case mt:e.value=e.props.join(",")}return je(n=bt(e.children,r))?e.return=e.value+"{"+n+"}":""}function vt(e,t){switch(function(e,t){return(((t<<2^Fe(e,0))<<2^Fe(e,1))<<2^Fe(e,2))<<2^Fe(e,3)}(e,t)){case 5103:return dt+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return dt+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return dt+e+ft+e+ct+e+e;case 6828:case 4268:return dt+e+ct+e+e;case 6165:return dt+e+ct+"flex-"+e+e;case 5187:return dt+e+Le(e,/(\w+).+(:[^]+)/,"-webkit-box-$1$2-ms-flex-$1$2")+e;case 5443:return dt+e+ct+"flex-item-"+Le(e,/flex-|-self/,"")+e;case 4675:return dt+e+ct+"flex-line-pack"+Le(e,/align-content|flex-|-self/,"")+e;case 5548:return dt+e+ct+Le(e,"shrink","negative")+e;case 5292:return dt+e+ct+Le(e,"basis","preferred-size")+e;case 6060:return dt+"box-"+Le(e,"-grow","")+dt+e+ct+Le(e,"grow","positive")+e;case 4554:return dt+Le(e,/([^-])(transform)/g,"$1-webkit-$2")+e;case 6187:return Le(Le(Le(e,/(zoom-|grab)/,dt+"$1"),/(image-set)/,dt+"$1"),e,"")+e;case 5495:case 3959:return Le(e,/(image-set\([^]*)/,dt+"$1$`$1");case 4968:return Le(Le(e,/(.+:)(flex-)?(.*)/,"-webkit-box-pack:$3-ms-flex-pack:$3"),/s.+-b[^;]+/,"justify")+dt+e+e;case 4095:case 3583:case 4068:case 2532:return Le(e,/(.+)-inline(.+)/,dt+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(je(e)-1-t>6)switch(Fe(e,t+1)){case 109:if(45!==Fe(e,t+4))break;case 102:return Le(e,/(.+:)(.+)-([^]+)/,"$1-webkit-$2-$3$1"+ft+(108==Fe(e,t+3)?"$3":"$2-$3"))+e;case 115:return~Ie(e,"stretch")?vt(Le(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==Fe(e,t+1))break;case 6444:switch(Fe(e,je(e)-3-(~Ie(e,"!important")&&10))){case 107:return Le(e,":",":"+dt)+e;case 101:return Le(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+dt+(45===Fe(e,14)?"inline-":"")+"box$3$1"+dt+"$2$3$1"+ct+"$2box$3")+e}break;case 5936:switch(Fe(e,t+11)){case 114:return dt+e+ct+Le(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return dt+e+ct+Le(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return dt+e+ct+Le(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return dt+e+ct+e+e}return e}function wt(e){return rt(kt("",null,null,null,[""],e=nt(e),0,[0],e))}function kt(e,t,n,r,a,o,i,l,u){for(var s=0,c=0,f=i,d=0,p=0,m=0,h=1,g=1,b=1,y=0,v="",w=a,k=o,x=r,S=v;g;)switch(m=y,y=Ye()){case 40:if(108!=m&&58==S.charCodeAt(f-1)){-1!=Ie(S+=Le(at(y),"&","&\f"),"&\f")&&(b=-1);break}case 34:case 39:case 91:S+=at(y);break;case 9:case 10:case 13:case 32:S+=ot(m);break;case 92:S+=it(Je()-1,7);continue;case 47:switch(Ze()){case 42:case 47:We(St(ut(Ye(),Je()),t,n),u);break;default:S+="/"}break;case 123*h:l[s++]=je(S)*b;case 125*h:case 59:case 0:switch(y){case 0:case 125:g=0;case 59+c:p>0&&je(S)-f&&We(p>32?Et(S+";",r,n,f-1):Et(Le(S," ","")+";",r,n,f-2),u);break;case 59:S+=";";default:if(We(x=xt(S,t,n,s,c,a,l,v,w=[],k=[],f),o),123===y)if(0===c)kt(S,t,x,x,w,o,f,l,k);else switch(d){case 100:case 109:case 115:kt(e,x,x,r&&We(xt(e,x,x,0,0,a,l,v,a,w=[],f),k),a,k,f,l,r?w:k);break;default:kt(S,x,x,x,[""],k,0,l,k)}}s=c=p=0,h=b=1,v=S="",f=i;break;case 58:f=1+je(S),p=m;default:if(h<1)if(123==y)--h;else if(125==y&&0==h++&&125==Xe())continue;switch(S+=Me(y),y*h){case 38:b=c>0?1:(S+="\f",-1);break;case 44:l[s++]=(je(S)-1)*b,b=1;break;case 64:45===Ze()&&(S+=at(Ye())),d=Ze(),c=f=je(v=S+=st(Je())),y++;break;case 45:45===m&&2==je(S)&&(h=0)}}return o}function xt(e,t,n,r,a,o,i,l,u,s,c){for(var f=a-1,d=0===a?o:[""],p=De(d),m=0,h=0,g=0;m<r;++m)for(var b=0,y=Ae(e,f+1,f=Oe(h=i[m])),v=e;b<p;++b)(v=$e(h>0?d[b]+" "+y:Le(y,/&\f/g,d[b])))&&(u[g++]=v);return Ke(e,t,n,0===a?mt:l,u,s,c)}function St(e,t,n){return Ke(e,t,n,pt,Me(qe),Ae(e,2,-2),0)}function Et(e,t,n,r){return Ke(e,t,n,ht,Ae(e,0,r),Ae(e,r+1,-1),r)}var Ct=function(e,t,n){for(var r=0,a=0;r=a,a=Ze(),38===r&&12===a&&(t[n]=1),!tt(a);)Ye();return et(e,He)},_t=new WeakMap,zt=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||_t.get(n))&&!r){_t.set(e,!0);for(var a=[],o=function(e,t){return rt(function(e,t){var n=-1,r=44;do{switch(tt(r)){case 0:38===r&&12===Ze()&&(t[n]=1),e[n]+=Ct(He-1,t,n);break;case 2:e[n]+=at(r);break;case 4:if(44===r){e[++n]=58===Ze()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=Me(r)}}while(r=Ye());return e}(nt(e),t))}(t,a),i=n.props,l=0,u=0;l<o.length;l++)for(var s=0;s<i.length;s++,u++)e.props[u]=a[l]?o[l].replace(/&\f/g,i[s]):i[s]+" "+o[l]}}},Pt=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}},Tt=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case ht:e.return=vt(e.value,e.length);break;case gt:return bt([Ge(e,{value:Le(e.value,"@","@"+dt)})],r);case mt:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return bt([Ge(e,{props:[Le(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return bt([Ge(e,{props:[Le(t,/:(plac\w+)/,":-webkit-input-$1")]}),Ge(e,{props:[Le(t,/:(plac\w+)/,":-moz-$1")]}),Ge(e,{props:[Le(t,/:(plac\w+)/,ct+"input-$1")]})],r)}return""}))}}];const Nt=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,a,o=e.stylisPlugins||Tt,i={},l=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)i[t[n]]=!0;l.push(e)}));var u,s,c,f,d=[yt,(f=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&f(e)})],p=(s=[zt,Pt].concat(o,d),c=De(s),function(e,t,n,r){for(var a="",o=0;o<c;o++)a+=s[o](e,t,n,r)||"";return a});a=function(e,t,n,r){u=n,bt(wt(e?e+"{"+t.styles+"}":t.styles),p),r&&(m.inserted[t.name]=!0)};var m={key:t,sheet:new Ne({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:i,registered:{},insert:a};return m.sheet.hydrate(l),m},Ot=function(e){var t=new WeakMap;return function(n){if(t.has(n))return t.get(n);var r=e(n);return t.set(n,r),r}},Mt=function(e){for(var t,n=0,r=0,a=e.length;a>=4;++r,a-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(a){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},Rt={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var $t=/[A-Z]|^ms/g,Lt=/_EMO_([^_]+?)_([^]*?)_EMO_/g,It=function(e){return 45===e.charCodeAt(1)},Ft=function(e){return null!=e&&"boolean"!=typeof e},At=ze((function(e){return It(e)?e:e.replace($t,"-$&").toLowerCase()})),jt=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(Lt,(function(e,t,n){return Wt={name:t,styles:n,next:Wt},t}))}return 1===Rt[e]||It(e)||"number"!=typeof t||0===t?t:t+"px"};function Dt(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return Wt={name:n.name,styles:n.styles,next:Wt},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)Wt={name:r.name,styles:r.styles,next:Wt},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var a=0;a<n.length;a++)r+=Dt(e,t,n[a])+";";else for(var o in n){var i=n[o];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=o+"{"+t[i]+"}":Ft(i)&&(r+=At(o)+":"+jt(o,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var l=Dt(e,t,i);switch(o){case"animation":case"animationName":r+=At(o)+":"+l+";";break;default:r+=o+"{"+l+"}"}}else for(var u=0;u<i.length;u++)Ft(i[u])&&(r+=At(o)+":"+jt(o,i[u])+";")}return r}(e,t,n);case"function":if(void 0!==e){var a=Wt,o=n(e);return Wt=a,Dt(e,t,o)}}if(null==t)return n;var i=t[n];return void 0!==i?i:n}var Wt,Bt=/label:\s*([^\s;\n{]+)\s*(;|$)/g,Ut=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,a="";Wt=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,a+=Dt(n,t,o)):a+=o[0];for(var i=1;i<e.length;i++)a+=Dt(n,t,e[i]),r&&(a+=o[i]);Bt.lastIndex=0;for(var l,u="";null!==(l=Bt.exec(a));)u+="-"+l[1];return{name:Mt(a)+u,styles:a,next:Wt}},Vt=(0,e.createContext)("undefined"!=typeof HTMLElement?Nt({key:"css"}):null);Vt.Provider;var Ht=function(t){return(0,e.forwardRef)((function(n,r){var a=(0,e.useContext)(Vt);return t(n,a,r)}))},qt=(0,e.createContext)({}),Qt=Ot((function(e){return Ot((function(t){return function(e,t){return"function"==typeof t?t(e):o({},e,t)}(e,t)}))})),Kt=function(t){var n=(0,e.useContext)(qt);return t.theme!==n&&(n=Qt(n)(t.theme)),(0,e.createElement)(qt.Provider,{value:n},t.children)};function Gt(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}t.useInsertionEffect&&t.useInsertionEffect;var Xt=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},Yt=function(e,t,n){Xt(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var a=t;do{e.insert(t===a?"."+r:"",a,e.sheet,!0),a=a.next}while(void 0!==a)}},Zt=Te,Jt=function(e){return"theme"!==e},en=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?Zt:Jt},tn=function(e,t,n){var r;if(t){var a=t.shouldForwardProp;r=e.__emotion_forwardProp&&a?function(t){return e.__emotion_forwardProp(t)&&a(t)}:a}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},nn=t.useInsertionEffect?t.useInsertionEffect:function(e){e()},rn=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return Xt(t,n,r),nn((function(){return Yt(t,n,r)})),null};var an=function t(n,r){var a,i,l=n.__emotion_real===n,u=l&&n.__emotion_base||n;void 0!==r&&(a=r.label,i=r.target);var s=tn(n,r,l),c=s||en(u),f=!c("as");return function(){var d=arguments,p=l&&void 0!==n.__emotion_styles?n.__emotion_styles.slice(0):[];if(void 0!==a&&p.push("label:"+a+";"),null==d[0]||void 0===d[0].raw)p.push.apply(p,d);else{p.push(d[0][0]);for(var m=d.length,h=1;h<m;h++)p.push(d[h],d[0][h])}var g=Ht((function(t,n,r){var a=f&&t.as||u,o="",l=[],d=t;if(null==t.theme){for(var m in d={},t)d[m]=t[m];d.theme=(0,e.useContext)(qt)}"string"==typeof t.className?o=Gt(n.registered,l,t.className):null!=t.className&&(o=t.className+" ");var h=Ut(p.concat(l),n.registered,d);o+=n.key+"-"+h.name,void 0!==i&&(o+=" "+i);var g=f&&void 0===s?en(a):c,b={};for(var y in t)f&&"as"===y||g(y)&&(b[y]=t[y]);return b.className=o,b.ref=r,(0,e.createElement)(e.Fragment,null,(0,e.createElement)(rn,{cache:n,serialized:h,isStringTag:"string"==typeof a}),(0,e.createElement)(a,b))}));return g.displayName=void 0!==a?a:"Styled("+("string"==typeof u?u:u.displayName||u.name||"Component")+")",g.defaultProps=n.defaultProps,g.__emotion_real=g,g.__emotion_base=u,g.__emotion_styles=p,g.__emotion_forwardProp=s,Object.defineProperty(g,"toString",{value:function(){return"."+i}}),g.withComponent=function(e,n){return t(e,o({},r,n,{shouldForwardProp:tn(g,n,!0)})).apply(void 0,p)},g}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){an[e]=an(e)}));const on=an;function ln(e,t){return on(e,t)}const un=["values","unit","step"];const sn={borderRadius:4},cn=["breakpoints","palette","spacing","shape"],fn=function(e={},...t){const{breakpoints:n={},palette:a={},spacing:i,shape:l={}}=e,u=r(e,cn),s=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:a=5}=e,i=r(e,un),l=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>o({},e,{[t.key]:t.val})),{})})(t),u=Object.keys(l);function s(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function c(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-a/100}${n})`}function f(e,r){const o=u.indexOf(r);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[u[o]]?t[u[o]]:r)-a/100}${n})`}return o({keys:u,values:l,up:s,down:c,between:f,only:function(e){return u.indexOf(e)+1<u.length?f(e,u[u.indexOf(e)+1]):s(e)},not:function(e){const t=u.indexOf(e);return 0===t?s(u[1]):t===u.length-1?c(u[t]):f(e,u[u.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},i)}(n),c=function(e=8){if(e.mui)return e;const t=T({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(i);let f=p({breakpoints:s,direction:"ltr",components:{},palette:o({mode:"light"},a),spacing:c,shape:o({},sn,l)},u);return f=t.reduce(((e,t)=>p(e,t)),f),f},dn=["variant"];function pn(e){return 0===e.length}function mn(e){const{variant:t}=e,n=r(e,dn);let a=t||"";return Object.keys(n).sort().forEach((t=>{a+="color"===t?pn(a)?e[t]:h(e[t]):`${pn(a)?t:h(t)}${h(e[t].toString())}`})),a}const hn=function(e=xe){const t=Object.keys(e).reduce(((t,n)=>(e[n].filterProps.forEach((r=>{t[r]=e[n]})),t)),{});function n(e,n,r){const a={[e]:n,theme:r},o=t[e];return o?o(a):{[e]:n}}return function e(r){const{sx:a,theme:o={}}=r||{};if(!a)return null;function i(r){let a=r;if("function"==typeof r)a=r(o);else if("object"!=typeof r)return r;if(!a)return null;const i=function(e={}){var t;return(null==e||null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}(o.breakpoints),l=Object.keys(i);let u=i;return Object.keys(a).forEach((r=>{const i="function"==typeof(l=a[r])?l(o):l;var l;if(null!=i)if("object"==typeof i)if(t[r])u=v(u,n(r,i,o));else{const t=c({theme:o},i,(e=>({[r]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(t,i)?u=v(u,t):u[r]=e({sx:i,theme:o})}else u=v(u,n(r,i,o))})),s=u,l.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),s);var s}return Array.isArray(a)?a.map(i):i(a)}}();hn.filterProps=["sx"];const gn=hn,bn=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],yn=["theme"],vn=["theme"];function wn(e){return 0===Object.keys(e).length}function kn(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const xn=fn();function Sn(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function En(e){if(e.type)return e;if("#"===e.charAt(0))return En(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error(m(9,e));let r,a=e.substring(t+1,e.length-1);if("color"===n){if(a=a.split(" "),r=a.shift(),4===a.length&&"/"===a[3].charAt(0)&&(a[3]=a[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(r))throw new Error(m(10,r))}else a=a.split(",");return a=a.map((e=>parseFloat(e))),{type:n,values:a,colorSpace:r}}function Cn(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function _n(e){let t="hsl"===(e=En(e)).type?En(function(e){e=En(e);const{values:t}=e,n=t[0],r=t[1]/100,a=t[2]/100,o=r*Math.min(a,1-a),i=(e,t=(e+n/30)%12)=>a-o*Math.max(Math.min(t-3,9-t,1),-1);let l="rgb";const u=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(l+="a",u.push(t[3])),Cn({type:l,values:u})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function zn(e,t){return e=En(e),t=Sn(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,Cn(e)}const Pn={black:"#000",white:"#fff"},Tn={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},Nn="#f3e5f5",On="#ce93d8",Mn="#ba68c8",Rn="#ab47bc",$n="#9c27b0",Ln="#7b1fa2",In="#e57373",Fn="#ef5350",An="#f44336",jn="#d32f2f",Dn="#c62828",Wn="#ffb74d",Bn="#ffa726",Un="#ff9800",Vn="#f57c00",Hn="#e65100",qn="#e3f2fd",Qn="#90caf9",Kn="#42a5f5",Gn="#1976d2",Xn="#1565c0",Yn="#4fc3f7",Zn="#29b6f6",Jn="#03a9f4",er="#0288d1",tr="#01579b",nr="#81c784",rr="#66bb6a",ar="#4caf50",or="#388e3c",ir="#2e7d32",lr="#1b5e20",ur=["mode","contrastThreshold","tonalOffset"],sr={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Pn.white,default:Pn.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},cr={text:{primary:Pn.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:Pn.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function fr(e,t,n,r){const a=r.light||r,o=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=function(e,t){if(e=En(e),t=Sn(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return Cn(e)}(e.main,a):"dark"===t&&(e.dark=function(e,t){if(e=En(e),t=Sn(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return Cn(e)}(e.main,o)))}const dr=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],pr={textTransform:"uppercase"},mr='"Roboto", "Helvetica", "Arial", sans-serif';function hr(e,t){const n="function"==typeof t?t(e):t,{fontFamily:a=mr,fontSize:i=14,fontWeightLight:l=300,fontWeightRegular:u=400,fontWeightMedium:s=500,fontWeightBold:c=700,htmlFontSize:f=16,allVariants:d,pxToRem:m}=n,h=r(n,dr),g=i/14,b=m||(e=>e/f*g+"rem"),y=(e,t,n,r,i)=>{return o({fontFamily:a,fontWeight:e,fontSize:b(t),lineHeight:n},a===mr?{letterSpacing:(l=r/t,Math.round(1e5*l)/1e5+"em")}:{},i,d);var l},v={h1:y(l,96,1.167,-1.5),h2:y(l,60,1.2,-.5),h3:y(u,48,1.167,0),h4:y(u,34,1.235,.25),h5:y(u,24,1.334,0),h6:y(s,20,1.6,.15),subtitle1:y(u,16,1.75,.15),subtitle2:y(s,14,1.57,.1),body1:y(u,16,1.5,.15),body2:y(u,14,1.43,.15),button:y(s,14,1.75,.4,pr),caption:y(u,12,1.66,.4),overline:y(u,12,2.66,1,pr)};return p(o({htmlFontSize:f,pxToRem:b,fontFamily:a,fontSize:i,fontWeightLight:l,fontWeightRegular:u,fontWeightMedium:s,fontWeightBold:c},v),h,{clone:!1})}function gr(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const br=["none",gr(0,2,1,-1,0,1,1,0,0,1,3,0),gr(0,3,1,-2,0,2,2,0,0,1,5,0),gr(0,3,3,-2,0,3,4,0,0,1,8,0),gr(0,2,4,-1,0,4,5,0,0,1,10,0),gr(0,3,5,-1,0,5,8,0,0,1,14,0),gr(0,3,5,-1,0,6,10,0,0,1,18,0),gr(0,4,5,-2,0,7,10,1,0,2,16,1),gr(0,5,5,-3,0,8,10,1,0,3,14,2),gr(0,5,6,-3,0,9,12,1,0,3,16,2),gr(0,6,6,-3,0,10,14,1,0,4,18,3),gr(0,6,7,-4,0,11,15,1,0,4,20,3),gr(0,7,8,-4,0,12,17,2,0,5,22,4),gr(0,7,8,-4,0,13,19,2,0,5,24,4),gr(0,7,9,-4,0,14,21,2,0,5,26,4),gr(0,8,9,-5,0,15,22,2,0,6,28,5),gr(0,8,10,-5,0,16,24,2,0,6,30,5),gr(0,8,11,-5,0,17,26,2,0,6,32,5),gr(0,9,11,-5,0,18,28,2,0,7,34,6),gr(0,9,12,-6,0,19,29,2,0,7,36,6),gr(0,10,13,-6,0,20,31,3,0,8,38,7),gr(0,10,13,-6,0,21,33,3,0,8,40,7),gr(0,10,14,-6,0,22,35,3,0,8,42,7),gr(0,11,14,-7,0,23,36,3,0,9,44,8),gr(0,11,15,-7,0,24,38,3,0,9,46,8)],yr=["duration","easing","delay"],vr={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},wr={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function kr(e){return`${Math.round(e)}ms`}function xr(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function Sr(e){const t=o({},vr,e.easing),n=o({},wr,e.duration);return o({getAutoHeightDuration:xr,create:(e=["all"],a={})=>{const{duration:o=n.standard,easing:i=t.easeInOut,delay:l=0}=a;return r(a,yr),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof o?o:kr(o)} ${i} ${"string"==typeof l?l:kr(l)}`)).join(",")}},e,{easing:t,duration:n})}const Er={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},Cr=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const _r=function(e={},...t){const{mixins:n={},palette:a={},transitions:i={},typography:l={}}=e,u=r(e,Cr),s=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:a=.2}=e,i=r(e,ur),l=e.primary||function(e="light"){return"dark"===e?{main:Qn,light:qn,dark:Kn}:{main:Gn,light:Kn,dark:Xn}}(t),u=e.secondary||function(e="light"){return"dark"===e?{main:On,light:Nn,dark:Rn}:{main:$n,light:Mn,dark:Ln}}(t),s=e.error||function(e="light"){return"dark"===e?{main:An,light:In,dark:jn}:{main:jn,light:Fn,dark:Dn}}(t),c=e.info||function(e="light"){return"dark"===e?{main:Zn,light:Yn,dark:er}:{main:er,light:Jn,dark:tr}}(t),f=e.success||function(e="light"){return"dark"===e?{main:rr,light:nr,dark:or}:{main:ir,light:ar,dark:lr}}(t),d=e.warning||function(e="light"){return"dark"===e?{main:Bn,light:Wn,dark:Vn}:{main:"#ed6c02",light:Un,dark:Hn}}(t);function h(e){const t=function(e,t){const n=_n(e),r=_n(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,cr.text.primary)>=n?cr.text.primary:sr.text.primary;return t}const g=({color:e,name:t,mainShade:n=500,lightShade:r=300,darkShade:i=700})=>{if(!(e=o({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(m(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(m(12,t?` (${t})`:"",JSON.stringify(e.main)));return fr(e,"light",r,a),fr(e,"dark",i,a),e.contrastText||(e.contrastText=h(e.main)),e},b={dark:cr,light:sr};return p(o({common:Pn,mode:t,primary:g({color:l,name:"primary"}),secondary:g({color:u,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:g({color:s,name:"error"}),warning:g({color:d,name:"warning"}),info:g({color:c,name:"info"}),success:g({color:f,name:"success"}),grey:Tn,contrastThreshold:n,getContrastText:h,augmentColor:g,tonalOffset:a},b[t]),i)}(a),c=fn(e);let f=p(c,{mixins:(d=c.breakpoints,c.spacing,h=n,o({toolbar:{minHeight:56,[`${d.up("xs")} and (orientation: landscape)`]:{minHeight:48},[d.up("sm")]:{minHeight:64}}},h)),palette:s,shadows:br.slice(),typography:hr(s,l),transitions:Sr(i),zIndex:o({},Er)});var d,h;return f=p(f,u),f=t.reduce(((e,t)=>p(e,t)),f),f},zr=_r(),Pr=e=>kn(e)&&"classes"!==e,Tr=function(e={}){const{defaultTheme:t=xn,rootShouldForwardProp:n=kn,slotShouldForwardProp:a=kn,styleFunctionSx:i=gn}=e;return(e,l={})=>{const{name:u,slot:s,skipVariantsResolver:c,skipSx:f,overridesResolver:d}=l,p=r(l,bn),m=void 0!==c?c:s&&"Root"!==s||!1,h=f||!1;let g=kn;"Root"===s?g=n:s&&(g=a);const b=ln(e,o({shouldForwardProp:g,label:void 0},p)),y=(e,...n)=>{const a=n?n.map((e=>"function"==typeof e&&e.__emotion_real!==e?n=>{let{theme:a}=n,i=r(n,yn);return e(o({theme:wn(a)?t:a},i))}:e)):[];let l=e;u&&d&&a.push((e=>{const n=wn(e.theme)?t:e.theme,r=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(u,n);if(r){const t={};return Object.entries(r).forEach((([r,a])=>{t[r]="function"==typeof a?a(o({},e,{theme:n})):a})),d(e,t)}return null})),u&&!m&&a.push((e=>{const n=wn(e.theme)?t:e.theme;return((e,t,n,r)=>{var a,o;const{ownerState:i={}}=e,l=[],u=null==n||null==(a=n.components)||null==(o=a[r])?void 0:o.variants;return u&&u.forEach((n=>{let r=!0;Object.keys(n.props).forEach((t=>{i[t]!==n.props[t]&&e[t]!==n.props[t]&&(r=!1)})),r&&l.push(t[mn(n.props)])})),l})(e,((e,t)=>{let n=[];t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants);const r={};return n.forEach((e=>{const t=mn(e.props);r[t]=e.style})),r})(u,n),n,u)})),h||a.push((e=>{const n=wn(e.theme)?t:e.theme;return i(o({},e,{theme:n}))}));const s=a.length-n.length;if(Array.isArray(e)&&s>0){const t=new Array(s).fill("");l=[...e,...t],l.raw=[...e.raw,...t]}else"function"==typeof e&&e.__emotion_real!==e&&(l=n=>{let{theme:a}=n,i=r(n,vn);return e(o({theme:wn(a)?t:a},i))});return b(l,...a)};return b.withConfig&&(y.withConfig=b.withConfig),y}}({defaultTheme:zr,rootShouldForwardProp:Pr}),Nr=Tr;function Or(e,t){const n=o({},t);return Object.keys(e).forEach((t=>{void 0===n[t]&&(n[t]=e[t])})),n}const Mr=e.createContext(null),Rr=fn(),$r=function(t=Rr){return function(t=null){const n=e.useContext(Mr);return n&&(r=n,0!==Object.keys(r).length)?n:t;var r}(t)};function Lr({props:e,name:t}){return function({props:e,name:t,defaultTheme:n}){const r=function(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?Or(t.components[n].defaultProps,r):r}({theme:$r(n),name:t,props:e});return r}({props:e,name:t,defaultTheme:zr})}const Ir=e.createContext(),Fr=e=>e,Ar=(()=>{let e=Fr;return{configure(t){e=t},generate:t=>e(t),reset(){e=Fr}}})(),jr={active:"Mui-active",checked:"Mui-checked",completed:"Mui-completed",disabled:"Mui-disabled",error:"Mui-error",expanded:"Mui-expanded",focused:"Mui-focused",focusVisible:"Mui-focusVisible",required:"Mui-required",selected:"Mui-selected"};function Dr(e,t){return jr[t]||`${Ar.generate(e)}-${t}`}function Wr(e,t){const n={};return t.forEach((t=>{n[t]=Dr(e,t)})),n}function Br(e){return Dr("MuiGrid",e)}const Ur=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12],Vr=Wr("MuiGrid",["root","container","item","zeroMinWidth",...[0,1,2,3,4,5,6,7,8,9,10].map((e=>`spacing-xs-${e}`)),...["column-reverse","column","row-reverse","row"].map((e=>`direction-xs-${e}`)),...["nowrap","wrap-reverse","wrap"].map((e=>`wrap-xs-${e}`)),...Ur.map((e=>`grid-xs-${e}`)),...Ur.map((e=>`grid-sm-${e}`)),...Ur.map((e=>`grid-md-${e}`)),...Ur.map((e=>`grid-lg-${e}`)),...Ur.map((e=>`grid-xl-${e}`))]),Hr=Vr;var qr=a(893);const Qr=["className","columns","columnSpacing","component","container","direction","item","lg","md","rowSpacing","sm","spacing","wrap","xl","xs","zeroMinWidth"];function Kr(e){const t=parseFloat(e);return`${t}${String(e).replace(String(t),"")||"px"}`}function Gr(e,t,n={}){if(!t||!e||e<=0)return[];if("string"==typeof e&&!Number.isNaN(Number(e))||"number"==typeof e)return[n[`spacing-xs-${String(e)}`]||`spacing-xs-${String(e)}`];const{xs:r,sm:a,md:o,lg:i,xl:l}=e;return[Number(r)>0&&(n[`spacing-xs-${String(r)}`]||`spacing-xs-${String(r)}`),Number(a)>0&&(n[`spacing-sm-${String(a)}`]||`spacing-sm-${String(a)}`),Number(o)>0&&(n[`spacing-md-${String(o)}`]||`spacing-md-${String(o)}`),Number(i)>0&&(n[`spacing-lg-${String(i)}`]||`spacing-lg-${String(i)}`),Number(l)>0&&(n[`spacing-xl-${String(l)}`]||`spacing-xl-${String(l)}`)]}const Xr=Nr("div",{name:"MuiGrid",slot:"Root",overridesResolver:(e,t)=>{const{container:n,direction:r,item:a,lg:o,md:i,sm:l,spacing:u,wrap:s,xl:c,xs:f,zeroMinWidth:d}=e.ownerState;return[t.root,n&&t.container,a&&t.item,d&&t.zeroMinWidth,...Gr(u,n,t),"row"!==r&&t[`direction-xs-${String(r)}`],"wrap"!==s&&t[`wrap-xs-${String(s)}`],!1!==f&&t[`grid-xs-${String(f)}`],!1!==l&&t[`grid-sm-${String(l)}`],!1!==i&&t[`grid-md-${String(i)}`],!1!==o&&t[`grid-lg-${String(o)}`],!1!==c&&t[`grid-xl-${String(c)}`]]}})((({ownerState:e})=>o({boxSizing:"border-box"},e.container&&{display:"flex",flexWrap:"wrap",width:"100%"},e.item&&{margin:0},e.zeroMinWidth&&{minWidth:0},"wrap"!==e.wrap&&{flexWrap:e.wrap})),(function({theme:e,ownerState:t}){return c({theme:e},f({values:t.direction,breakpoints:e.breakpoints.values}),(e=>{const t={flexDirection:e};return 0===e.indexOf("column")&&(t[`& > .${Hr.item}`]={maxWidth:"none"}),t}))}),(function({theme:e,ownerState:t}){const{container:n,rowSpacing:r}=t;let a={};if(n&&0!==r){const t=f({values:r,breakpoints:e.breakpoints.values});a=c({theme:e},t,(t=>{const n=e.spacing(t);return"0px"!==n?{marginTop:`-${Kr(n)}`,[`& > .${Hr.item}`]:{paddingTop:Kr(n)}}:{}}))}return a}),(function({theme:e,ownerState:t}){const{container:n,columnSpacing:r}=t;let a={};if(n&&0!==r){const t=f({values:r,breakpoints:e.breakpoints.values});a=c({theme:e},t,(t=>{const n=e.spacing(t);return"0px"!==n?{width:`calc(100% + ${Kr(n)})`,marginLeft:`-${Kr(n)}`,[`& > .${Hr.item}`]:{paddingLeft:Kr(n)}}:{}}))}return a}),(function({theme:e,ownerState:t}){let n;return e.breakpoints.keys.reduce(((r,a)=>{let i={};if(t[a]&&(n=t[a]),!n)return r;if(!0===n)i={flexBasis:0,flexGrow:1,maxWidth:"100%"};else if("auto"===n)i={flexBasis:"auto",flexGrow:0,flexShrink:0,maxWidth:"none",width:"auto"};else{const l=f({values:t.columns,breakpoints:e.breakpoints.values}),u="object"==typeof l?l[a]:l;if(null==u)return r;const s=Math.round(n/u*1e8)/1e6+"%";let c={};if(t.container&&t.item&&0!==t.columnSpacing){const n=e.spacing(t.columnSpacing);if("0px"!==n){const e=`calc(${s} + ${Kr(n)})`;c={flexBasis:e,maxWidth:e}}}i=o({flexBasis:s,flexGrow:0,maxWidth:s},c)}return 0===e.breakpoints.values[a]?Object.assign(r,i):r[e.breakpoints.up(a)]=i,r}),{})})),Yr=e.forwardRef((function(t,n){const a=Ce(Lr({props:t,name:"MuiGrid"})),{className:i,columns:u,columnSpacing:s,component:c="div",container:f=!1,direction:d="row",item:p=!1,lg:m=!1,md:h=!1,rowSpacing:g,sm:b=!1,spacing:y=0,wrap:v="wrap",xl:w=!1,xs:k=!1,zeroMinWidth:x=!1}=a,S=r(a,Qr),E=g||y,C=s||y,_=e.useContext(Ir),z=f?u||12:_,P=o({},a,{columns:z,container:f,direction:d,item:p,lg:m,md:h,sm:b,rowSpacing:E,columnSpacing:C,wrap:v,xl:w,xs:k,zeroMinWidth:x}),T=(e=>{const{classes:t,container:n,direction:r,item:a,lg:o,md:i,sm:l,spacing:u,wrap:s,xl:c,xs:f,zeroMinWidth:d}=e;return _e({root:["root",n&&"container",a&&"item",d&&"zeroMinWidth",...Gr(u,n),"row"!==r&&`direction-xs-${String(r)}`,"wrap"!==s&&`wrap-xs-${String(s)}`,!1!==f&&`grid-xs-${String(f)}`,!1!==l&&`grid-sm-${String(l)}`,!1!==i&&`grid-md-${String(i)}`,!1!==o&&`grid-lg-${String(o)}`,!1!==c&&`grid-xl-${String(c)}`]},Br,t)})(P);return(0,qr.jsx)(Ir.Provider,{value:z,children:(0,qr.jsx)(Xr,o({ownerState:P,className:l(T.root,i),as:c,ref:n},S))})})),Zr=Yr;function Jr(e,t){"function"==typeof e?e(t):e&&(e.current=t)}const ea=function(t,n){return e.useMemo((()=>null==t&&null==n?null:e=>{Jr(t,e),Jr(n,e)}),[t,n])},ta="undefined"!=typeof window?e.useLayoutEffect:e.useEffect,na=function(t){const n=e.useRef(t);return ta((()=>{n.current=t})),e.useCallback(((...e)=>(0,n.current)(...e)),[])};let ra,aa=!0,oa=!1;const ia={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function la(e){e.metaKey||e.altKey||e.ctrlKey||(aa=!0)}function ua(){aa=!1}function sa(){"hidden"===this.visibilityState&&oa&&(aa=!0)}const ca=function(){const t=e.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",la,!0),t.addEventListener("mousedown",ua,!0),t.addEventListener("pointerdown",ua,!0),t.addEventListener("touchstart",ua,!0),t.addEventListener("visibilitychange",sa,!0))}),[]),n=e.useRef(!1);return{isFocusVisibleRef:n,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return aa||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!ia[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(n.current=!0,!0)},onBlur:function(){return!!n.current&&(oa=!0,window.clearTimeout(ra),ra=window.setTimeout((()=>{oa=!1}),100),n.current=!1,!0)},ref:t}};function fa(e,t){return fa=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},fa(e,t)}const da=e.createContext(null);function pa(t,n){var r=Object.create(null);return t&&e.Children.map(t,(function(e){return e})).forEach((function(t){r[t.key]=function(t){return n&&(0,e.isValidElement)(t)?n(t):t}(t)})),r}function ma(e,t,n){return null!=n[t]?n[t]:e.props[t]}function ha(t,n,r){var a=pa(t.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,a=Object.create(null),o=[];for(var i in e)i in t?o.length&&(a[i]=o,o=[]):o.push(i);var l={};for(var u in t){if(a[u])for(r=0;r<a[u].length;r++){var s=a[u][r];l[a[u][r]]=n(s)}l[u]=n(u)}for(r=0;r<o.length;r++)l[o[r]]=n(o[r]);return l}(n,a);return Object.keys(o).forEach((function(i){var l=o[i];if((0,e.isValidElement)(l)){var u=i in n,s=i in a,c=n[i],f=(0,e.isValidElement)(c)&&!c.props.in;!s||u&&!f?s||!u||f?s&&u&&(0,e.isValidElement)(c)&&(o[i]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:c.props.in,exit:ma(l,"exit",t),enter:ma(l,"enter",t)})):o[i]=(0,e.cloneElement)(l,{in:!1}):o[i]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:ma(l,"exit",t),enter:ma(l,"enter",t)})}})),o}var ga=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},ba=function(t){var n,a;function i(e,n){var r,a=(r=t.call(this,e,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:a,firstRender:!0},r}a=t,(n=i).prototype=Object.create(a.prototype),n.prototype.constructor=n,fa(n,a);var l=i.prototype;return l.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},l.componentWillUnmount=function(){this.mounted=!1},i.getDerivedStateFromProps=function(t,n){var r,a,o=n.children,i=n.handleExited;return{children:n.firstRender?(r=t,a=i,pa(r.children,(function(t){return(0,e.cloneElement)(t,{onExited:a.bind(null,t),in:!0,appear:ma(t,"appear",r),enter:ma(t,"enter",r),exit:ma(t,"exit",r)})}))):ha(t,o,i),firstRender:!1}},l.handleExited=function(e,t){var n=pa(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=o({},t.children);return delete n[e.key],{children:n}})))},l.render=function(){var t=this.props,n=t.component,a=t.childFactory,o=r(t,["component","childFactory"]),i=this.state.contextValue,l=ga(this.state.children).map(a);return delete o.appear,delete o.enter,delete o.exit,null===n?e.createElement(da.Provider,{value:i},l):e.createElement(da.Provider,{value:i},e.createElement(n,o,l))},i}(e.Component);ba.propTypes={},ba.defaultProps={component:"div",childFactory:function(e){return e}};const ya=ba;a(679);var va=t.useInsertionEffect?t.useInsertionEffect:e.useLayoutEffect,wa=Ht((function(t,n){var r=t.styles,a=Ut([r],void 0,(0,e.useContext)(qt)),o=(0,e.useRef)();return va((function(){var e=n.key+"-global",t=new n.sheet.constructor({key:e,nonce:n.sheet.nonce,container:n.sheet.container,speedy:n.sheet.isSpeedy}),r=!1,i=document.querySelector('style[data-emotion="'+e+" "+a.name+'"]');return n.sheet.tags.length&&(t.before=n.sheet.tags[0]),null!==i&&(r=!0,i.setAttribute("data-emotion",e),t.hydrate([i])),o.current=[t,r],function(){t.flush()}}),[n]),va((function(){var e=o.current,t=e[0];if(e[1])e[1]=!1;else{if(void 0!==a.next&&Yt(n,a.next,!0),t.tags.length){var r=t.tags[t.tags.length-1].nextElementSibling;t.before=r,t.flush()}n.insert("",a,t,!1)}}),[n,a.name]),null}));function ka(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Ut(t)}var xa=function(){var e=ka.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}};const Sa=Wr("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),Ea=["center","classes","className"];let Ca,_a,za,Pa,Ta=e=>e;const Na=xa(Ca||(Ca=Ta`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),Oa=xa(_a||(_a=Ta`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),Ma=xa(za||(za=Ta`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),Ra=Nr("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),$a=Nr((function(t){const{className:n,classes:r,pulsate:a=!1,rippleX:o,rippleY:i,rippleSize:u,in:s,onExited:c,timeout:f}=t,[d,p]=e.useState(!1),m=l(n,r.ripple,r.rippleVisible,a&&r.ripplePulsate),h={width:u,height:u,top:-u/2+i,left:-u/2+o},g=l(r.child,d&&r.childLeaving,a&&r.childPulsate);return s||d||p(!0),e.useEffect((()=>{if(!s&&null!=c){const e=setTimeout(c,f);return()=>{clearTimeout(e)}}}),[c,s,f]),(0,qr.jsx)("span",{className:m,style:h,children:(0,qr.jsx)("span",{className:g})})}),{name:"MuiTouchRipple",slot:"Ripple"})(Pa||(Pa=Ta`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),Sa.rippleVisible,Na,550,(({theme:e})=>e.transitions.easing.easeInOut),Sa.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),Sa.child,Sa.childLeaving,Oa,550,(({theme:e})=>e.transitions.easing.easeInOut),Sa.childPulsate,Ma,(({theme:e})=>e.transitions.easing.easeInOut)),La=e.forwardRef((function(t,n){const a=Lr({props:t,name:"MuiTouchRipple"}),{center:i=!1,classes:u={},className:s}=a,c=r(a,Ea),[f,d]=e.useState([]),p=e.useRef(0),m=e.useRef(null);e.useEffect((()=>{m.current&&(m.current(),m.current=null)}),[f]);const h=e.useRef(!1),g=e.useRef(null),b=e.useRef(null),y=e.useRef(null);e.useEffect((()=>()=>{clearTimeout(g.current)}),[]);const v=e.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:a,cb:o}=e;d((e=>[...e,(0,qr.jsx)($a,{classes:{ripple:l(u.ripple,Sa.ripple),rippleVisible:l(u.rippleVisible,Sa.rippleVisible),ripplePulsate:l(u.ripplePulsate,Sa.ripplePulsate),child:l(u.child,Sa.child),childLeaving:l(u.childLeaving,Sa.childLeaving),childPulsate:l(u.childPulsate,Sa.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:a},p.current)])),p.current+=1,m.current=o}),[u]),w=e.useCallback(((e={},t={},n)=>{const{pulsate:r=!1,center:a=i||t.pulsate,fakeElement:o=!1}=t;if("mousedown"===e.type&&h.current)return void(h.current=!1);"touchstart"===e.type&&(h.current=!0);const l=o?null:y.current,u=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let s,c,f;if(a||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)s=Math.round(u.width/2),c=Math.round(u.height/2);else{const{clientX:t,clientY:n}=e.touches?e.touches[0]:e;s=Math.round(t-u.left),c=Math.round(n-u.top)}if(a)f=Math.sqrt((2*u.width**2+u.height**2)/3),f%2==0&&(f+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-s),s)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-c),c)+2;f=Math.sqrt(e**2+t**2)}e.touches?null===b.current&&(b.current=()=>{v({pulsate:r,rippleX:s,rippleY:c,rippleSize:f,cb:n})},g.current=setTimeout((()=>{b.current&&(b.current(),b.current=null)}),80)):v({pulsate:r,rippleX:s,rippleY:c,rippleSize:f,cb:n})}),[i,v]),k=e.useCallback((()=>{w({},{pulsate:!0})}),[w]),x=e.useCallback(((e,t)=>{if(clearTimeout(g.current),"touchend"===e.type&&b.current)return b.current(),b.current=null,void(g.current=setTimeout((()=>{x(e,t)})));b.current=null,d((e=>e.length>0?e.slice(1):e)),m.current=t}),[]);return e.useImperativeHandle(n,(()=>({pulsate:k,start:w,stop:x})),[k,w,x]),(0,qr.jsx)(Ra,o({className:l(u.root,Sa.root,s),ref:y},c,{children:(0,qr.jsx)(ya,{component:null,exit:!0,children:f})}))}));function Ia(e){return Dr("MuiButtonBase",e)}const Fa=Wr("MuiButtonBase",["root","disabled","focusVisible"]),Aa=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],ja=Nr("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${Fa.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),Da=e.forwardRef((function(t,n){const a=Lr({props:t,name:"MuiButtonBase"}),{action:i,centerRipple:u=!1,children:s,className:c,component:f="button",disabled:d=!1,disableRipple:p=!1,disableTouchRipple:m=!1,focusRipple:h=!1,LinkComponent:g="a",onBlur:b,onClick:y,onContextMenu:v,onDragLeave:w,onFocus:k,onFocusVisible:x,onKeyDown:S,onKeyUp:E,onMouseDown:C,onMouseLeave:_,onMouseUp:z,onTouchEnd:P,onTouchMove:T,onTouchStart:N,tabIndex:O=0,TouchRippleProps:M,touchRippleRef:R,type:$}=a,L=r(a,Aa),I=e.useRef(null),F=e.useRef(null),A=ea(F,R),{isFocusVisibleRef:j,onFocus:D,onBlur:W,ref:B}=ca(),[U,V]=e.useState(!1);d&&U&&V(!1),e.useImperativeHandle(i,(()=>({focusVisible:()=>{V(!0),I.current.focus()}})),[]);const[H,q]=e.useState(!1);e.useEffect((()=>{q(!0)}),[]);const Q=H&&!p&&!d;function K(e,t,n=m){return na((r=>(t&&t(r),!n&&F.current&&F.current[e](r),!0)))}e.useEffect((()=>{U&&h&&!p&&H&&F.current.pulsate()}),[p,h,U,H]);const G=K("start",C),X=K("stop",v),Y=K("stop",w),Z=K("stop",z),J=K("stop",(e=>{U&&e.preventDefault(),_&&_(e)})),ee=K("start",N),te=K("stop",P),ne=K("stop",T),re=K("stop",(e=>{W(e),!1===j.current&&V(!1),b&&b(e)}),!1),ae=na((e=>{I.current||(I.current=e.currentTarget),D(e),!0===j.current&&(V(!0),x&&x(e)),k&&k(e)})),oe=()=>{const e=I.current;return f&&"button"!==f&&!("A"===e.tagName&&e.href)},ie=e.useRef(!1),le=na((e=>{h&&!ie.current&&U&&F.current&&" "===e.key&&(ie.current=!0,F.current.stop(e,(()=>{F.current.start(e)}))),e.target===e.currentTarget&&oe()&&" "===e.key&&e.preventDefault(),S&&S(e),e.target===e.currentTarget&&oe()&&"Enter"===e.key&&!d&&(e.preventDefault(),y&&y(e))})),ue=na((e=>{h&&" "===e.key&&F.current&&U&&!e.defaultPrevented&&(ie.current=!1,F.current.stop(e,(()=>{F.current.pulsate(e)}))),E&&E(e),y&&e.target===e.currentTarget&&oe()&&" "===e.key&&!e.defaultPrevented&&y(e)}));let se=f;"button"===se&&(L.href||L.to)&&(se=g);const ce={};"button"===se?(ce.type=void 0===$?"button":$,ce.disabled=d):(L.href||L.to||(ce.role="button"),d&&(ce["aria-disabled"]=d));const fe=ea(B,I),de=ea(n,fe),pe=o({},a,{centerRipple:u,component:f,disabled:d,disableRipple:p,disableTouchRipple:m,focusRipple:h,tabIndex:O,focusVisible:U}),me=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:a}=e,o=_e({root:["root",t&&"disabled",n&&"focusVisible"]},Ia,a);return n&&r&&(o.root+=` ${r}`),o})(pe);return(0,qr.jsxs)(ja,o({as:se,className:l(me.root,c),ownerState:pe,onBlur:re,onClick:y,onContextMenu:X,onFocus:ae,onKeyDown:le,onKeyUp:ue,onMouseDown:G,onMouseLeave:J,onMouseUp:Z,onDragLeave:Y,onTouchEnd:te,onTouchMove:ne,onTouchStart:ee,ref:de,tabIndex:d?-1:O,type:$},ce,L,{children:[s,Q?(0,qr.jsx)(La,o({ref:A,center:u},M)):null]}))})),Wa=Da,Ba=h;function Ua(e){return Dr("MuiButton",e)}const Va=Wr("MuiButton",["root","text","textInherit","textPrimary","textSecondary","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","contained","containedInherit","containedPrimary","containedSecondary","disableElevation","focusVisible","disabled","colorInherit","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","iconSizeSmall","iconSizeMedium","iconSizeLarge"]),Ha=e.createContext({}),qa=["children","color","component","className","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"],Qa=e=>o({},"small"===e.size&&{"& > *:nth-of-type(1)":{fontSize:18}},"medium"===e.size&&{"& > *:nth-of-type(1)":{fontSize:20}},"large"===e.size&&{"& > *:nth-of-type(1)":{fontSize:22}}),Ka=Nr(Wa,{shouldForwardProp:e=>Pr(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${Ba(n.color)}`],t[`size${Ba(n.size)}`],t[`${n.variant}Size${Ba(n.size)}`],"inherit"===n.color&&t.colorInherit,n.disableElevation&&t.disableElevation,n.fullWidth&&t.fullWidth]}})((({theme:e,ownerState:t})=>{var n,r;return o({},e.typography.button,{minWidth:64,padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":o({textDecoration:"none",backgroundColor:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:zn(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"text"===t.variant&&"inherit"!==t.color&&{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:zn(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"outlined"===t.variant&&"inherit"!==t.color&&{border:`1px solid ${(e.vars||e).palette[t.color].main}`,backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:zn(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"contained"===t.variant&&{backgroundColor:(e.vars||e).palette.grey.A100,boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2],backgroundColor:(e.vars||e).palette.grey[300]}},"contained"===t.variant&&"inherit"!==t.color&&{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}}),"&:active":o({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[8]}),[`&.${Va.focusVisible}`]:o({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[6]}),[`&.${Va.disabled}`]:o({color:(e.vars||e).palette.action.disabled},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`},"outlined"===t.variant&&"secondary"===t.color&&{border:`1px solid ${(e.vars||e).palette.action.disabled}`},"contained"===t.variant&&{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground})},"text"===t.variant&&{padding:"6px 8px"},"text"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main},"outlined"===t.variant&&{padding:"5px 15px",border:"1px solid currentColor"},"outlined"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main,border:e.vars?`1px solid rgba(${e.vars.palette[t.color].mainChannel} / 0.5)`:`1px solid ${zn(e.palette[t.color].main,.5)}`},"contained"===t.variant&&{color:e.vars?e.vars.palette.text.primary:null==(n=(r=e.palette).getContrastText)?void 0:n.call(r,e.palette.grey[300]),backgroundColor:(e.vars||e).palette.grey[300],boxShadow:(e.vars||e).shadows[2]},"contained"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main},"inherit"===t.color&&{color:"inherit",borderColor:"currentColor"},"small"===t.size&&"text"===t.variant&&{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"text"===t.variant&&{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"outlined"===t.variant&&{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"outlined"===t.variant&&{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"contained"===t.variant&&{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"contained"===t.variant&&{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},t.fullWidth&&{width:"100%"})}),(({ownerState:e})=>e.disableElevation&&{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${Va.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${Va.disabled}`]:{boxShadow:"none"}})),Ga=Nr("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.startIcon,t[`iconSize${Ba(n.size)}`]]}})((({ownerState:e})=>o({display:"inherit",marginRight:8,marginLeft:-4},"small"===e.size&&{marginLeft:-2},Qa(e)))),Xa=Nr("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.endIcon,t[`iconSize${Ba(n.size)}`]]}})((({ownerState:e})=>o({display:"inherit",marginRight:-4,marginLeft:8},"small"===e.size&&{marginRight:-2},Qa(e)))),Ya=e.forwardRef((function(t,n){const a=e.useContext(Ha),i=Lr({props:Or(a,t),name:"MuiButton"}),{children:u,color:s="primary",component:c="button",className:f,disabled:d=!1,disableElevation:p=!1,disableFocusRipple:m=!1,endIcon:h,focusVisibleClassName:g,fullWidth:b=!1,size:y="medium",startIcon:v,type:w,variant:k="text"}=i,x=r(i,qa),S=o({},i,{color:s,component:c,disabled:d,disableElevation:p,disableFocusRipple:m,fullWidth:b,size:y,type:w,variant:k}),E=(e=>{const{color:t,disableElevation:n,fullWidth:r,size:a,variant:i,classes:l}=e;return o({},l,_e({root:["root",i,`${i}${Ba(t)}`,`size${Ba(a)}`,`${i}Size${Ba(a)}`,"inherit"===t&&"colorInherit",n&&"disableElevation",r&&"fullWidth"],label:["label"],startIcon:["startIcon",`iconSize${Ba(a)}`],endIcon:["endIcon",`iconSize${Ba(a)}`]},Ua,l))})(S),C=v&&(0,qr.jsx)(Ga,{className:E.startIcon,ownerState:S,children:v}),_=h&&(0,qr.jsx)(Xa,{className:E.endIcon,ownerState:S,children:h});return(0,qr.jsxs)(Ka,o({ownerState:S,className:l(f,a.className),component:c,disabled:d,focusRipple:!m,focusVisibleClassName:l(E.focusVisible,g),ref:n,type:w},x,{classes:E,children:[C,u,_]}))}));function Za(e){return Dr("MuiIcon",e)}Wr("MuiIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);const Ja=["baseClassName","className","color","component","fontSize"],eo=Nr("span",{name:"MuiIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${Ba(n.color)}`],t[`fontSize${Ba(n.fontSize)}`]]}})((({theme:e,ownerState:t})=>({userSelect:"none",width:"1em",height:"1em",overflow:"hidden",display:"inline-block",textAlign:"center",flexShrink:0,fontSize:{inherit:"inherit",small:e.typography.pxToRem(20),medium:e.typography.pxToRem(24),large:e.typography.pxToRem(36)}[t.fontSize],color:{primary:e.palette.primary.main,secondary:e.palette.secondary.main,info:e.palette.info.main,success:e.palette.success.main,warning:e.palette.warning.main,action:e.palette.action.active,error:e.palette.error.main,disabled:e.palette.action.disabled,inherit:void 0}[t.color]}))),to=e.forwardRef((function(e,t){const n=Lr({props:e,name:"MuiIcon"}),{baseClassName:a="material-icons",className:i,color:u="inherit",component:s="span",fontSize:c="medium"}=n,f=r(n,Ja),d=o({},n,{baseClassName:a,color:u,component:s,fontSize:c}),p=(e=>{const{color:t,fontSize:n,classes:r}=e;return _e({root:["root","inherit"!==t&&`color${Ba(t)}`,`fontSize${Ba(n)}`]},Za,r)})(d);return(0,qr.jsx)(eo,o({as:s,className:l(a,"notranslate",p.root,i),ownerState:d,"aria-hidden":!0,ref:t},f))}));to.muiName="Icon";const no=to;var ro=a(238);var ao=function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function l(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}u((r=r.apply(e,t||[])).next())}))},oo=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},io=(0,e.createContext)({capture:function(){},downloadImage:function(){},copyText:function(){},loading:!1}),lo=function(t){var n,r=t.children,a=((n=new ro.UAParser).setUA(navigator.userAgent),n.getResult()),o=a.browser,i=a.os,l=a.engine,u=e.useState(),s=u[0],c=u[1],f=e.useState(!1),d=f[0],p=f[1];e.useEffect((function(){chrome.storage.local.get("result").then((function(e){c(e.result)}))}),[]);return e.createElement(io.Provider,{value:{capture:function(){return ao(void 0,void 0,void 0,(function(){var e,t,n;return oo(this,(function(r){switch(r.label){case 0:return p(!0),[4,ao(void 0,void 0,void 0,(function(){var e;return oo(this,(function(t){switch(t.label){case 0:return[4,ao(void 0,void 0,void 0,(function(){return oo(this,(function(e){switch(e.label){case 0:return[4,chrome.tabs.query({active:!0,currentWindow:!0})];case 1:return[2,e.sent()[0]]}}))}))];case 1:return[2,{title:(e=t.sent()).title,url:e.url,windowSize:"".concat(e.width," x ").concat(e.height),os:"".concat(i.name," - ").concat(i.version),browser:"".concat(o.name," - ").concat(o.version),engine:"".concat(l.name," - ").concat(l.version)}]}}))}))];case 1:return e=r.sent(),[4,new Promise((function(e){chrome.tabs.captureVisibleTab(null,{format:"png"},(function(t){e(t)}))}))];case 2:return t=r.sent(),n={details:e,image:t},chrome.storage.local.set({result:n}),c(n),p(!1),[2]}}))}))},loading:d,result:s,downloadImage:function(){return ao(void 0,void 0,void 0,(function(){return oo(this,(function(e){return chrome.downloads.download({url:s.image,filename:"".concat((new Date).getTime(),".png")}),[2]}))}))},copyText:function(){navigator.clipboard.writeText("Title: ".concat(s.details.title,"\nURL: ").concat(s.details.url,"\nWindow Size: ").concat(s.details.windowSize,"\n\nBrowser: ").concat(s.details.browser,"\nOS: ").concat(s.details.os,"\nEngine: ").concat(s.details.engine))}}},r)},uo=function(t){var n=t.onClick,r=t.loading,a=t.sx,o=void 0===a?{}:a,i=t.children,l=e.useState(!1),u=l[0],s=l[1];return e.createElement(Ya,{sx:o,disabled:r||u,onClick:function(){s(!0),n(),setTimeout((function(){s(!1)}),500)},size:"small",variant:"contained"},u?e.createElement(no,null,"check"):i)};const so=function(){var t=e.useContext(io),n=t.capture,r=t.loading,a=t.result,o=t.downloadImage,i=t.copyText;return e.createElement(Zr,{container:!0,spacing:1,sx:{"& .MuiGrid-item":{display:"flex",flexDirection:"column",alignItems:"stretch"}}},a&&e.createElement(e.Fragment,null,e.createElement(Zr,{item:!0},e.createElement(uo,{sx:{px:0},loading:r,onClick:i},e.createElement(no,null,"content_copy"))),e.createElement(Zr,{item:!0},e.createElement(uo,{sx:{px:0},loading:r,onClick:o},e.createElement(no,null,"download")))),e.createElement(Zr,{item:!0,flex:1},e.createElement(uo,{sx:{px:0},loading:r,onClick:n},"Capture")))},co=["className","component"],fo=function(t={}){const{defaultTheme:n,defaultClassName:a="MuiBox-root",generateClassName:i,styleFunctionSx:u=gn}=t,s=ln("div")(u),c=e.forwardRef((function(e,t){const u=$r(n),c=Ce(e),{className:f,component:d="div"}=c,p=r(c,co);return(0,qr.jsx)(s,o({as:d,ref:t,className:l(f,i?i(a):a),theme:u},p))}));return c}({defaultTheme:_r(),defaultClassName:"MuiBox-root",generateClassName:Ar.generate}),po=fo;function mo(e){return Dr("MuiTypography",e)}Wr("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]);const ho=["align","className","component","gutterBottom","noWrap","paragraph","variant","variantMapping"],go=Nr("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.variant&&t[n.variant],"inherit"!==n.align&&t[`align${Ba(n.align)}`],n.noWrap&&t.noWrap,n.gutterBottom&&t.gutterBottom,n.paragraph&&t.paragraph]}})((({theme:e,ownerState:t})=>o({margin:0},t.variant&&e.typography[t.variant],"inherit"!==t.align&&{textAlign:t.align},t.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},t.gutterBottom&&{marginBottom:"0.35em"},t.paragraph&&{marginBottom:16}))),bo={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},yo={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"},vo=e.forwardRef((function(e,t){const n=Lr({props:e,name:"MuiTypography"}),a=(e=>yo[e]||e)(n.color),i=Ce(o({},n,{color:a})),{align:u="inherit",className:s,component:c,gutterBottom:f=!1,noWrap:d=!1,paragraph:p=!1,variant:m="body1",variantMapping:h=bo}=i,g=r(i,ho),b=o({},i,{align:u,color:a,className:s,component:c,gutterBottom:f,noWrap:d,paragraph:p,variant:m,variantMapping:h}),y=c||(p?"p":h[m]||bo[m])||"span",v=(e=>{const{align:t,gutterBottom:n,noWrap:r,paragraph:a,variant:o,classes:i}=e;return _e({root:["root",o,"inherit"!==e.align&&`align${Ba(t)}`,n&&"gutterBottom",r&&"noWrap",a&&"paragraph"]},mo,i)})(b);return(0,qr.jsx)(go,o({as:y,ref:t,ownerState:b,className:l(v.root,s)},g))})),wo=function(){return e.createElement(po,{onClick:function(){chrome.tabs.create({url:"https://syneki.com/"})},sx:{display:"flex",flexDirection:"column",alignItems:"flex-end",textAlign:"right",cursor:"pointer","& img":{height:"25px"}}},e.createElement(vo,{sx:{fontSize:"0.8em"}},"Powered By"),e.createElement("img",{src:"/public/images/logo.svg"}))},ko=function(t){var n=t.details,r=t.image;return e.createElement(Zr,{container:!0,sx:{mb:2}},e.createElement(Zr,{item:!0,xs:8},e.createElement(vo,null,e.createElement("b",null,"Title:")," ",n.title,e.createElement("br",null),e.createElement("b",null,"URL:")," ",n.url,e.createElement("br",null),e.createElement("b",null,"Window Size:")," ",n.windowSize,e.createElement("br",null),e.createElement("br",null),e.createElement("b",null,"Browser:")," ",n.browser,e.createElement("br",null),e.createElement("b",null,"OS:")," ",n.os,e.createElement("br",null),e.createElement("b",null,"Engine:")," ",n.engine,e.createElement("br",null))),e.createElement(Zr,{item:!0,xs:4,sx:{"& img":{maxWidth:"100%"}}},e.createElement("img",{src:r})))};var xo=function(){return xo=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},xo.apply(this,arguments)};var So=function(){return So=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},So.apply(this,arguments)},Eo=_r({palette:{primary:{main:"#3C50E0",dark:"#00005C",light:"#EEF5FF"},success:{main:"#28e0b4"}},spacing:16,typography:{fontFamily:"Poppins",fontSize:14},shadows:function(){for(var e=["none"],t=1;t<24;t++)e.push("rgba(0, 0, 0, 0.1) 0px ".concat(2*t,"px ").concat(8*t,"px;"));return e}(),components:{MuiButton:{styleOverrides:{root:{borderRadius:"10px",textTransform:"unset",padding:"1.2em 4em",fontWeight:"500",fontSize:"1em"},sizeSmall:{padding:"0.6em 4em"}}}}});const Co=Eo=_r(Eo,{breakpoints:{values:So(So({},Eo.breakpoints.values),{lg:1200})},typography:{body1:{fontSize:"0.8em",color:"#717E9D"},h1:{fontWeight:"700",fontSize:"4em",color:Eo.palette.primary.dark},h2:{fontWeight:"600",color:Eo.palette.primary.dark,marginBottom:"0.5em"},h3:{textTransform:"uppercase",fontSize:"1em",fontWeight:"600",color:Eo.palette.primary.main,letterSpacing:"0.3em",marginBottom:"1em"},h4:{fontWeight:"500",color:Eo.palette.primary.dark},h5:{fontWeight:"500",color:Eo.palette.primary.dark}},components:{MuiContainer:{styleOverrides:{maxWidthLg:{maxWidth:"1200px"},fixed:{maxWidth:"1400px"}}},MuiCard:{styleOverrides:{root:{padding:"2rem",borderRadius:"16px",boxShadow:Eo.shadows[4]}}}}});function _o(e){const{styles:t,defaultTheme:n={}}=e,r="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,qr.jsx)(wa,{styles:r})}const zo=function(e){return(0,qr.jsx)(_o,o({},e,{defaultTheme:zr}))},Po=(e,t)=>o({WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box",WebkitTextSizeAdjust:"100%"},t&&{colorScheme:e.palette.mode}),To=e=>o({color:e.palette.text.primary},e.typography.body1,{backgroundColor:e.palette.background.default,"@media print":{backgroundColor:e.palette.common.white}}),No=function(t){const n=Lr({props:t,name:"MuiCssBaseline"}),{children:r,enableColorScheme:a=!1}=n;return(0,qr.jsxs)(e.Fragment,{children:[(0,qr.jsx)(zo,{styles:e=>((e,t=!1)=>{var n,r;let a={html:Po(e,t),"*, *::before, *::after":{boxSizing:"inherit"},"strong, b":{fontWeight:e.typography.fontWeightBold},body:o({margin:0},To(e),{"&::backdrop":{backgroundColor:e.palette.background.default}})};const i=null==(n=e.components)||null==(r=n.MuiCssBaseline)?void 0:r.styleOverrides;return i&&(a=[a,i]),a})(e,a)}),r]})};n.render(e.createElement((function(t){var n=t.children;return e.createElement(Kt,{theme:Co},e.createElement(lo,null,e.createElement(No,null),e.createElement(po,{sx:{minWidth:"500px",p:2}},n)))}),null,e.createElement((function(){var t=e.useContext(io),n=t.loading,r=t.result;return t.capture,e.createElement(e.Fragment,null,!n&&r&&e.createElement(ko,xo({},r)),e.createElement(Zr,{container:!0,spacing:2,alignItems:"center"},e.createElement(Zr,{item:!0,xs:9},e.createElement(so,null)),e.createElement(Zr,{item:!0,xs:3},e.createElement(wo,null))))}),null)),document.getElementById("app"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,